{"title":"汇编语言学习 DOSBox+MASM 安装及使用教程","date":"2021-05-08T06:19:14.000Z","toc":true,"summary":"安装DOSBox和MASM 以及编写汇编程序实现输出 Hello Word，记录学习过程。","source":"_posts/汇编语言学习-DOSBox-MASM-安装及使用教程.md","raw":"---\ntitle: 汇编语言学习 DOSBox+MASM 安装及使用教程\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-05-08 14:19:14\npassword:\nsummary: 安装DOSBox和MASM 以及编写汇编程序实现输出 Hello Word，记录学习过程。\ntags:\n- DOSBox\n- MASM\ncategories:\n- 汇编\n---\n\n学校没有开设《汇编语言》这门课，但我觉得学习汇编挺重要的，对学习计组以及理解计算机原理很有帮助！\n\n## 1】安装DOSBox和MASM\n\n### 1)安装DOSBox\n\n首先官网下载DOSBox[传送门](https://www.dosbox.com/download.php?main=1)，网盘链接：https://pan.baidu.com/s/13H0IU9xdYUJIQnwv1eE4Ag  提取码：2g8s ，包含MASM\n\n\n安装过程就不说了，建议安装在D盘，C盘也可以。我这里是安装在C盘，安装好后打开，**注意有两个窗口，不要关闭**\n\n找到文件：**C:\\Users\\用户\\AppData\\Local\\DOSBox\\dosbox-0.74-3.conf**，找不到AppData查看隐藏的文件，使用记事本打开dosbox-0.74-3.conf，在末尾添加下面两行代码：\n\n```\nmount d d:\\masm\n d:\n```\n\n![](https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/01.png)\n\n上面代码的意思就是把D盘映射为虚拟C盘，现在打开DOSBox可以看到自动映射了。\n\n![](https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/2.png)\n\n### 2）安装MASM\n\n自己去下载也可以，网盘里面下载下来直接提取到**D盘根目录**就行了\n\n![](https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/3.png)\n\n没有提取\tMASM是无法进行debug的，现在打开就可以愉快的开始使用了。\n\n![](https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/4.png)\n\n## 2】使用DOSBox编写汇编程序\n\n### 1）编写 helloword 汇编源程序\n\n打开 DOSBox，输入 **edit** 编写一个汇编源程序\n\n![](https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/5.png)\n\n代码：//\n\n```asm\ndata segment                   ;这里定义一个数据段\n     tab db 'hello world$'     ;这里用内存存放字节数据 'hellow world!',$用来判断字符串是否输出完毕\ndata ends                      ;数据段的结束标志\n\ncode segment                   ;这里定义了一个代码段\nassume cs:code, ds:data        ;这里把程序中定义的段与对应的段寄存器关联起来\n    \nstart:                         ;这里是一个标号，根据end后面的标号判断这里是程序的开始位置\n      mov ax,data\n      mov ds,ax                ;这里把数据段的地址放到数据段寄存器ds中\n      lea dx,tab               ;dx中放将要显示数据的偏移地址\n      mov ah,9h\n      int 21h                  ;调用21号中断的9号功能来显示字符串\n      \n      mov ah,4c00h\n      int 21h                  ;程序返回在这里插入图片描述\n      \ncode ends                      ;代码段的结束语\nend start                      ;定义程序从哪个标号处开始执行\n```\n\n编写好后点击 file ，选择 save as ...，输入文件名称 **hello** ，后缀是 **.asm** ,然后点击 **ok**\n\n也可使用其他编辑器编写源代码，保存到 MASM 文件夹下，修改后缀为 .ASM就行了。\n\n![](https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/6.png)\n\n打开 D:\\MASM 就可以看见我们编写的源程序了。\n\n![](https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/7.png)\n\n### 2）编译\n\n打开DOSBox，输入 **masm** ，确认后弹出的第一行输入要编译的源程序的名称：hello.asm ,也可以直接输入 MASM hello.asm ，都一样。\n\n> “[.ASM]”提示我们，默认的文件扩展名是asm，比如，要编译的源程序文件名是“p1.asm”，只要在这里输入“p1”即可。可如果源程序文件不是以asm为扩展名的话，就要输入它的全名。比如源程序文件名为“p1.txt”，就要输入全名。\n>\n> 在输入源程序文件名的时候一定要指明它所在的路径。如果文件就在当前路径下，只输入文件名就可以，可如果文件在其他的目录中，则要输入路径，比如，要编译的文件p1.txt在“c:\\windows\\desktop”下，则要输入“c:\\windows\\desktop\\p1.txt”。这里，我们要编译的文件是C盘根目录下的1.asm，所以此处输入“c:\\1.asm”。\n> \n\n在输入源程序文件名后，程序会继续提示我们要编译出的目标文件的名称，目标文件是我们对一个源程序编译要得到的最终结果。注意屏幕上的显示 \"[ hello.OBJ ] \",因为我们已经输入了源程序文件名为 hello.asm ,则编译程序默认输出文件名为 hello.obj ，所以不必再指定文件名。直接按 ENTER ，在当前目录下生成 hello.obj 文件。 \n\n![](https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/8.png)\n\n![](https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/9.png)\n\n我们到MASM文件夹下可以看到多了一个 **hello.obj** 文件，源程序的编译最后两行如果出现警告和错误必须要改正，否则无法生成obj文件。\n\n### 3）连接\n\n接着上面的顺序，现在已经生成了一个**hello.obj** 文件，我们需要对目标文件进行连接，从而得到可执行文件。\t输入 LINK ，弹出的第一行输入 **obj** 文件名称，比如 **hello**，也可以直接输入 **LINK hello.obj**\n\n![](https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/10.png)\n\n这里出现一个警告：没有栈段，我们不予理会。\n\n连接成功后会在 MASM 目录下生成一个 hello.exe 文件，如果出现错误，则无法生成。\n\n连接的作用：\n\n1. 当源程序很大时，可以将它分为几个源程序文件来编译，每个源程序编译成为目标文件后，再用连接程序将他们连接到一起，生成一个可执行文件；\n2. 程序中调用来某个库文件中的子程序，需要将这个库文件和该程序生成的目标文件连接到一起，生成一个可执行文件；\n3. 一个源程序编译后，得到了存有机器码的目标文件，目标文件中的有些内容还不能直接用来生成可执行文件，连接程序将这些内容处理为最终的可执行信息。所以，在只有一个源程序文件，而又不需要调用某个库中的子程序的情况下，也必须用连接程序对目标文件进行处理，生成可执行文件。\n\n### 4）执行我们编译好的 **.exe** 文件\n\n输入:\n\n```\nhello.exe\nhello\n```\n\n都可以执行exe文件，当然前提是在 MASM 状态下。如图\n\n![](https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/11.png)\n\n至此就是编写汇编源程序以及运行的全部内容，我们还可以在此基础上进行debug，查看heelo.exe的执行情况，更多的知识请自行前往学习。\n\n","slug":"汇编语言学习-DOSBox-MASM-安装及使用教程","published":true,"updated":"2021-12-14T04:46:20.344Z","_id":"clq6dy4ao003iikw0s85badpy","comments":true,"layout":"post","photos":[],"link":"","html":"<p>学校没有开设《汇编语言》这门课，但我觉得学习汇编挺重要的，对学习计组以及理解计算机原理很有帮助！</p>\n<h2 id=\"1】安装DOSBox和MASM\"><a href=\"#1】安装DOSBox和MASM\" class=\"headerlink\" title=\"1】安装DOSBox和MASM\"></a>1】安装DOSBox和MASM</h2><h3 id=\"1-安装DOSBox\"><a href=\"#1-安装DOSBox\" class=\"headerlink\" title=\"1)安装DOSBox\"></a>1)安装DOSBox</h3><p>首先官网下载DOSBox<a href=\"https://www.dosbox.com/download.php?main=1\" target=\"_blank\" rel=\"noopener\">传送门</a>，网盘链接：<a href=\"https://pan.baidu.com/s/13H0IU9xdYUJIQnwv1eE4Ag\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/13H0IU9xdYUJIQnwv1eE4Ag</a>  提取码：2g8s ，包含MASM</p>\n<p>安装过程就不说了，建议安装在D盘，C盘也可以。我这里是安装在C盘，安装好后打开，<strong>注意有两个窗口，不要关闭</strong></p>\n<p>找到文件：<strong>C:\\Users\\用户\\AppData\\Local\\DOSBox\\dosbox-0.74-3.conf</strong>，找不到AppData查看隐藏的文件，使用记事本打开dosbox-0.74-3.conf，在末尾添加下面两行代码：</p>\n<pre><code>mount d d:\\masm\n d:</code></pre><p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/01.png\" alt></p>\n<p>上面代码的意思就是把D盘映射为虚拟C盘，现在打开DOSBox可以看到自动映射了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/2.png\" alt></p>\n<h3 id=\"2）安装MASM\"><a href=\"#2）安装MASM\" class=\"headerlink\" title=\"2）安装MASM\"></a>2）安装MASM</h3><p>自己去下载也可以，网盘里面下载下来直接提取到<strong>D盘根目录</strong>就行了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/3.png\" alt></p>\n<p>没有提取    MASM是无法进行debug的，现在打开就可以愉快的开始使用了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/4.png\" alt></p>\n<h2 id=\"2】使用DOSBox编写汇编程序\"><a href=\"#2】使用DOSBox编写汇编程序\" class=\"headerlink\" title=\"2】使用DOSBox编写汇编程序\"></a>2】使用DOSBox编写汇编程序</h2><h3 id=\"1）编写-helloword-汇编源程序\"><a href=\"#1）编写-helloword-汇编源程序\" class=\"headerlink\" title=\"1）编写 helloword 汇编源程序\"></a>1）编写 helloword 汇编源程序</h3><p>打开 DOSBox，输入 <strong>edit</strong> 编写一个汇编源程序</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/5.png\" alt></p>\n<p>代码：//</p>\n<pre class=\"line-numbers language-asm\"><code class=\"language-asm\">data segment                   ;这里定义一个数据段\n     tab db 'hello world$'     ;这里用内存存放字节数据 'hellow world!',$用来判断字符串是否输出完毕\ndata ends                      ;数据段的结束标志\n\ncode segment                   ;这里定义了一个代码段\nassume cs:code, ds:data        ;这里把程序中定义的段与对应的段寄存器关联起来\n\nstart:                         ;这里是一个标号，根据end后面的标号判断这里是程序的开始位置\n      mov ax,data\n      mov ds,ax                ;这里把数据段的地址放到数据段寄存器ds中\n      lea dx,tab               ;dx中放将要显示数据的偏移地址\n      mov ah,9h\n      int 21h                  ;调用21号中断的9号功能来显示字符串\n\n      mov ah,4c00h\n      int 21h                  ;程序返回在这里插入图片描述\n\ncode ends                      ;代码段的结束语\nend start                      ;定义程序从哪个标号处开始执行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>编写好后点击 file ，选择 save as …，输入文件名称 <strong>hello</strong> ，后缀是 <strong>.asm</strong> ,然后点击 <strong>ok</strong></p>\n<p>也可使用其他编辑器编写源代码，保存到 MASM 文件夹下，修改后缀为 .ASM就行了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/6.png\" alt></p>\n<p>打开 D:\\MASM 就可以看见我们编写的源程序了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/7.png\" alt></p>\n<h3 id=\"2）编译\"><a href=\"#2）编译\" class=\"headerlink\" title=\"2）编译\"></a>2）编译</h3><p>打开DOSBox，输入 <strong>masm</strong> ，确认后弹出的第一行输入要编译的源程序的名称：hello.asm ,也可以直接输入 MASM hello.asm ，都一样。</p>\n<blockquote>\n<p>“[.ASM]”提示我们，默认的文件扩展名是asm，比如，要编译的源程序文件名是“p1.asm”，只要在这里输入“p1”即可。可如果源程序文件不是以asm为扩展名的话，就要输入它的全名。比如源程序文件名为“p1.txt”，就要输入全名。</p>\n<p>在输入源程序文件名的时候一定要指明它所在的路径。如果文件就在当前路径下，只输入文件名就可以，可如果文件在其他的目录中，则要输入路径，比如，要编译的文件p1.txt在“c:\\windows\\desktop”下，则要输入“c:\\windows\\desktop\\p1.txt”。这里，我们要编译的文件是C盘根目录下的1.asm，所以此处输入“c:\\1.asm”。</p>\n</blockquote>\n<p>在输入源程序文件名后，程序会继续提示我们要编译出的目标文件的名称，目标文件是我们对一个源程序编译要得到的最终结果。注意屏幕上的显示 “[ hello.OBJ ] “,因为我们已经输入了源程序文件名为 hello.asm ,则编译程序默认输出文件名为 hello.obj ，所以不必再指定文件名。直接按 ENTER ，在当前目录下生成 hello.obj 文件。 </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/8.png\" alt></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/9.png\" alt></p>\n<p>我们到MASM文件夹下可以看到多了一个 <strong>hello.obj</strong> 文件，源程序的编译最后两行如果出现警告和错误必须要改正，否则无法生成obj文件。</p>\n<h3 id=\"3）连接\"><a href=\"#3）连接\" class=\"headerlink\" title=\"3）连接\"></a>3）连接</h3><p>接着上面的顺序，现在已经生成了一个<strong>hello.obj</strong> 文件，我们需要对目标文件进行连接，从而得到可执行文件。    输入 LINK ，弹出的第一行输入 <strong>obj</strong> 文件名称，比如 <strong>hello</strong>，也可以直接输入 <strong>LINK hello.obj</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/10.png\" alt></p>\n<p>这里出现一个警告：没有栈段，我们不予理会。</p>\n<p>连接成功后会在 MASM 目录下生成一个 hello.exe 文件，如果出现错误，则无法生成。</p>\n<p>连接的作用：</p>\n<ol>\n<li>当源程序很大时，可以将它分为几个源程序文件来编译，每个源程序编译成为目标文件后，再用连接程序将他们连接到一起，生成一个可执行文件；</li>\n<li>程序中调用来某个库文件中的子程序，需要将这个库文件和该程序生成的目标文件连接到一起，生成一个可执行文件；</li>\n<li>一个源程序编译后，得到了存有机器码的目标文件，目标文件中的有些内容还不能直接用来生成可执行文件，连接程序将这些内容处理为最终的可执行信息。所以，在只有一个源程序文件，而又不需要调用某个库中的子程序的情况下，也必须用连接程序对目标文件进行处理，生成可执行文件。</li>\n</ol>\n<h3 id=\"4）执行我们编译好的-exe-文件\"><a href=\"#4）执行我们编译好的-exe-文件\" class=\"headerlink\" title=\"4）执行我们编译好的 .exe 文件\"></a>4）执行我们编译好的 <strong>.exe</strong> 文件</h3><p>输入:</p>\n<pre><code>hello.exe\nhello</code></pre><p>都可以执行exe文件，当然前提是在 MASM 状态下。如图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/11.png\" alt></p>\n<p>至此就是编写汇编源程序以及运行的全部内容，我们还可以在此基础上进行debug，查看heelo.exe的执行情况，更多的知识请自行前往学习。</p>\n","excerpt":"","more":"<p>学校没有开设《汇编语言》这门课，但我觉得学习汇编挺重要的，对学习计组以及理解计算机原理很有帮助！</p>\n<h2 id=\"1】安装DOSBox和MASM\"><a href=\"#1】安装DOSBox和MASM\" class=\"headerlink\" title=\"1】安装DOSBox和MASM\"></a>1】安装DOSBox和MASM</h2><h3 id=\"1-安装DOSBox\"><a href=\"#1-安装DOSBox\" class=\"headerlink\" title=\"1)安装DOSBox\"></a>1)安装DOSBox</h3><p>首先官网下载DOSBox<a href=\"https://www.dosbox.com/download.php?main=1\" target=\"_blank\" rel=\"noopener\">传送门</a>，网盘链接：<a href=\"https://pan.baidu.com/s/13H0IU9xdYUJIQnwv1eE4Ag\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/13H0IU9xdYUJIQnwv1eE4Ag</a>  提取码：2g8s ，包含MASM</p>\n<p>安装过程就不说了，建议安装在D盘，C盘也可以。我这里是安装在C盘，安装好后打开，<strong>注意有两个窗口，不要关闭</strong></p>\n<p>找到文件：<strong>C:\\Users\\用户\\AppData\\Local\\DOSBox\\dosbox-0.74-3.conf</strong>，找不到AppData查看隐藏的文件，使用记事本打开dosbox-0.74-3.conf，在末尾添加下面两行代码：</p>\n<pre><code>mount d d:\\masm\n d:</code></pre><p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/01.png\" alt></p>\n<p>上面代码的意思就是把D盘映射为虚拟C盘，现在打开DOSBox可以看到自动映射了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/2.png\" alt></p>\n<h3 id=\"2）安装MASM\"><a href=\"#2）安装MASM\" class=\"headerlink\" title=\"2）安装MASM\"></a>2）安装MASM</h3><p>自己去下载也可以，网盘里面下载下来直接提取到<strong>D盘根目录</strong>就行了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/3.png\" alt></p>\n<p>没有提取    MASM是无法进行debug的，现在打开就可以愉快的开始使用了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/4.png\" alt></p>\n<h2 id=\"2】使用DOSBox编写汇编程序\"><a href=\"#2】使用DOSBox编写汇编程序\" class=\"headerlink\" title=\"2】使用DOSBox编写汇编程序\"></a>2】使用DOSBox编写汇编程序</h2><h3 id=\"1）编写-helloword-汇编源程序\"><a href=\"#1）编写-helloword-汇编源程序\" class=\"headerlink\" title=\"1）编写 helloword 汇编源程序\"></a>1）编写 helloword 汇编源程序</h3><p>打开 DOSBox，输入 <strong>edit</strong> 编写一个汇编源程序</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/5.png\" alt></p>\n<p>代码：//</p>\n<pre><code class=\"asm\">data segment                   ;这里定义一个数据段\n     tab db &#39;hello world$&#39;     ;这里用内存存放字节数据 &#39;hellow world!&#39;,$用来判断字符串是否输出完毕\ndata ends                      ;数据段的结束标志\n\ncode segment                   ;这里定义了一个代码段\nassume cs:code, ds:data        ;这里把程序中定义的段与对应的段寄存器关联起来\n\nstart:                         ;这里是一个标号，根据end后面的标号判断这里是程序的开始位置\n      mov ax,data\n      mov ds,ax                ;这里把数据段的地址放到数据段寄存器ds中\n      lea dx,tab               ;dx中放将要显示数据的偏移地址\n      mov ah,9h\n      int 21h                  ;调用21号中断的9号功能来显示字符串\n\n      mov ah,4c00h\n      int 21h                  ;程序返回在这里插入图片描述\n\ncode ends                      ;代码段的结束语\nend start                      ;定义程序从哪个标号处开始执行</code></pre>\n<p>编写好后点击 file ，选择 save as …，输入文件名称 <strong>hello</strong> ，后缀是 <strong>.asm</strong> ,然后点击 <strong>ok</strong></p>\n<p>也可使用其他编辑器编写源代码，保存到 MASM 文件夹下，修改后缀为 .ASM就行了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/6.png\" alt></p>\n<p>打开 D:\\MASM 就可以看见我们编写的源程序了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/7.png\" alt></p>\n<h3 id=\"2）编译\"><a href=\"#2）编译\" class=\"headerlink\" title=\"2）编译\"></a>2）编译</h3><p>打开DOSBox，输入 <strong>masm</strong> ，确认后弹出的第一行输入要编译的源程序的名称：hello.asm ,也可以直接输入 MASM hello.asm ，都一样。</p>\n<blockquote>\n<p>“[.ASM]”提示我们，默认的文件扩展名是asm，比如，要编译的源程序文件名是“p1.asm”，只要在这里输入“p1”即可。可如果源程序文件不是以asm为扩展名的话，就要输入它的全名。比如源程序文件名为“p1.txt”，就要输入全名。</p>\n<p>在输入源程序文件名的时候一定要指明它所在的路径。如果文件就在当前路径下，只输入文件名就可以，可如果文件在其他的目录中，则要输入路径，比如，要编译的文件p1.txt在“c:\\windows\\desktop”下，则要输入“c:\\windows\\desktop\\p1.txt”。这里，我们要编译的文件是C盘根目录下的1.asm，所以此处输入“c:\\1.asm”。</p>\n</blockquote>\n<p>在输入源程序文件名后，程序会继续提示我们要编译出的目标文件的名称，目标文件是我们对一个源程序编译要得到的最终结果。注意屏幕上的显示 “[ hello.OBJ ] “,因为我们已经输入了源程序文件名为 hello.asm ,则编译程序默认输出文件名为 hello.obj ，所以不必再指定文件名。直接按 ENTER ，在当前目录下生成 hello.obj 文件。 </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/8.png\" alt></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/9.png\" alt></p>\n<p>我们到MASM文件夹下可以看到多了一个 <strong>hello.obj</strong> 文件，源程序的编译最后两行如果出现警告和错误必须要改正，否则无法生成obj文件。</p>\n<h3 id=\"3）连接\"><a href=\"#3）连接\" class=\"headerlink\" title=\"3）连接\"></a>3）连接</h3><p>接着上面的顺序，现在已经生成了一个<strong>hello.obj</strong> 文件，我们需要对目标文件进行连接，从而得到可执行文件。    输入 LINK ，弹出的第一行输入 <strong>obj</strong> 文件名称，比如 <strong>hello</strong>，也可以直接输入 <strong>LINK hello.obj</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/10.png\" alt></p>\n<p>这里出现一个警告：没有栈段，我们不予理会。</p>\n<p>连接成功后会在 MASM 目录下生成一个 hello.exe 文件，如果出现错误，则无法生成。</p>\n<p>连接的作用：</p>\n<ol>\n<li>当源程序很大时，可以将它分为几个源程序文件来编译，每个源程序编译成为目标文件后，再用连接程序将他们连接到一起，生成一个可执行文件；</li>\n<li>程序中调用来某个库文件中的子程序，需要将这个库文件和该程序生成的目标文件连接到一起，生成一个可执行文件；</li>\n<li>一个源程序编译后，得到了存有机器码的目标文件，目标文件中的有些内容还不能直接用来生成可执行文件，连接程序将这些内容处理为最终的可执行信息。所以，在只有一个源程序文件，而又不需要调用某个库中的子程序的情况下，也必须用连接程序对目标文件进行处理，生成可执行文件。</li>\n</ol>\n<h3 id=\"4）执行我们编译好的-exe-文件\"><a href=\"#4）执行我们编译好的-exe-文件\" class=\"headerlink\" title=\"4）执行我们编译好的 .exe 文件\"></a>4）执行我们编译好的 <strong>.exe</strong> 文件</h3><p>输入:</p>\n<pre><code>hello.exe\nhello</code></pre><p>都可以执行exe文件，当然前提是在 MASM 状态下。如图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@2.1/Images/posts/DOSBox/11.png\" alt></p>\n<p>至此就是编写汇编源程序以及运行的全部内容，我们还可以在此基础上进行debug，查看heelo.exe的执行情况，更多的知识请自行前往学习。</p>\n","path":"hui-bian-yu-yan-xue-xi-dosbox-masm-an-zhuang-ji-shi-yong-jiao-cheng.html","permalink":"https://www.yshawlon.cn/hui-bian-yu-yan-xue-xi-dosbox-masm-an-zhuang-ji-shi-yong-jiao-cheng.html","tags":[{"name":"DOSBox","_id":"clq6dy4bh005uikw0nd8qjyqq","slug":"DOSBox","path":"tags/DOSBox/","permalink":"https://www.yshawlon.cn/tags/DOSBox/","length":1},{"name":"MASM","_id":"clq6dy4bi005xikw0kdzxcs0p","slug":"MASM","path":"tags/MASM/","permalink":"https://www.yshawlon.cn/tags/MASM/","length":1}],"categories":[{"name":"汇编","_id":"clq6dy4ak0037ikw0ze8i7hy0","slug":"汇编","path":"categories/汇编/","permalink":"https://www.yshawlon.cn/categories/汇编/","length":3}],"prev":{"title":"《汇编语言》王爽著学习笔记记录(后半部分)","date":"2021-05-08T15:08:22.000Z","summary":"8086CPU中，只有bx 、si、di、bp四个寄存器可以用在 [...] 中来进行内存单元的寻址。","slug":"《汇编语言》王爽著学习笔记记录-后半部分","published":true,"updated":"2021-10-20T13:16:23.895Z","_id":"clq6dy49t001uikw07vacfjmw","layout":"post","photos":[],"link":"","excerpt":"","path":"hui-bian-yu-yan-wang-shuang-zhu-xue-xi-bi-ji-ji-lu-hou-ban-bu-fen.html","permalink":"https://www.yshawlon.cn/hui-bian-yu-yan-wang-shuang-zhu-xue-xi-bi-ji-ji-lu-hou-ban-bu-fen.html","__post":true},"next":{"title":"《汇编语言》王爽著学习笔记记录(前半部分)","date":"2021-05-08T06:17:32.000Z","summary":"看了看书发现书上的一些概念容易忘记，就顺手打下来，考虑到篇幅过长，分为前后两个部分。","slug":"《汇编语言》王爽著学习笔记记录","published":true,"updated":"2021-10-20T13:12:16.826Z","_id":"clq6dy49x0022ikw0nxom9iws","layout":"post","photos":[],"link":"","excerpt":"","path":"hui-bian-yu-yan-wang-shuang-zhu-xue-xi-bi-ji-ji-lu.html","permalink":"https://www.yshawlon.cn/hui-bian-yu-yan-wang-shuang-zhu-xue-xi-bi-ji-ji-lu.html","__post":true},"__post":true}