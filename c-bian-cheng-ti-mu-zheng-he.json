{"title":"C++编程题目整合","date":"2020-04-26T10:51:17.000Z","toc":true,"summary":"就从第四章类与对象开始吧，前面的章节和c差不多在另一篇文章。","source":"_posts/C-编程题目整合.md","raw":"---\ntitle: C++编程题目整合\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-26 18:51:17\npassword:\nsummary: 就从第四章类与对象开始吧，前面的章节和c差不多在另一篇文章。\ntags:\n- 学习笔记\ncategories:\n- C++\n---\n\n\n\n**就从第四章类与对象开始吧，前面的章节和c差不多。**\n\n\n\n### 1.点类定义和使用\n\n**【问题描述】**\n\n定义一个点类，该类包含整形坐标x,y以及用于设置坐标值的函数，名为setxy（）参数自行确定，以及用于显示坐标的函数displayxy()参数自行设置。合理编写主函数，能够实现（3，4）以及（5，6）固定两个点对象的参数设置，以及信息输出\n\n**【输入形式】**\n\n无数据输入，请一定使用类的定义以及对象的创建的相关知识\n\n**【输出形式】**\n\n输出两个固定点的相关信息\n\n**【样例输入】**\n\n**【样例输出】**\n\nThe first point is:(3,4)\n\nThe second point is:(5,6)\n\n\n\n```c++\n#include<iostream>\nusing namespace std;\nclass Point {\n\tpublic:\n\t\t  \tPoint(int a,int b) \n\t\t  \t{ \tx=a;\n\t\t  \t\ty=b;\n\t\t\t} \n\t\t  void setxy(int a,int b)\n\t\t  {\n\t\t  \t  x=a;\n\t\t  \t  y=b;\n\t\t  }\n\t\t \t\t void display()\n\t\t {\n\t\t \tcout<<\"The first point is\"<<\":\"<<\"(\"<<x<<\",\"<<y<<\")\"<<endl;\n\t\t \t//cout<<\"The second point is\"<<\":\"<<\"(\"<<5<<\",\"<<6<<\")\"<<endl;\n\t\t }\n\tprivate: \n\t\tint x,y;\n};\nint main()\n{\n\t//int a,b,c,d;\n\tPoint s1(3,4);\n\tPoint s2(5,6);\n\t//s.setxy(3,4);\n\t//s.display();\n\t//s.setxy(5,6);\n\ts1.display();\n\ts2.display();\n\treturn 0;\n}\n```\n\n\n\n------\n\n### 2.三角形类\n\n**【问题描述】**\n\n定义一个描述三角形的类Tri，其具体要求为：  \n\n（1）私有数据成员为三角形的三边 \n\n （2）公有成员函数      构造函数：用以初始化指定的三角形对象；求三角形的边长的成员函数；求三角形面积的成员函数；输出三角形各种参数的成员函数即用以输出三角形对象的边长、周长和面积。\n\n**【输入形式】**\n\n输入三角形的三边长 【输出形式】若构成三角形，输出三角形的边长、周长及面积，否则输出“不构成三角形!” \n\n**【样例输入1】**\n\n  3 4 5 \n\n**【样例输出1】**    \n\n三角形的边长:3 4 5  三角形的周长:12  三角形的面积:6\n\n**【样例输入1】** \n\n 1 2 3 \n\n**【样例输出1】**   \n\n 不构成三角形!\n\n\n\n```c++\n#include<iostream>\n#include<math.h>\nusing namespace std; \n\nclass Tri\n{\n\t\tdouble a,b,c;  //定义三角形的三边\n\tpublic:\n\t\tTri(double x, double y, double z) //构造函数，初始化三边\n\t\t{\t\ta=x; b=y;c=z;\t\t}\n\t\t\n\t\tdouble Peri()  //返回三角形的周长\n\t\t{\t\treturn (a+b+c);\t\t}\n\t\t\n\t\tdouble Area()  //返回三角形的面积\n\t\t{\tdouble s=Peri()/2;\n\t\t\tdouble area=sqrt(s*(s-a)*(s-b)*(s-c));\n\t\t\treturn area;\n\t\t}\n\t\t\n\t\tvoid Show() //输出三角形的参数\n\t\t{\tcout<<\"三角形的边长:\"<<a<<' '<<b<<' '<<c<<endl;\n\t\t\tcout<<\"三角形的周长:\"<<Peri()<<endl;\n\t\t\tcout<<\"三角形的面积:\"<<Area()<<endl<<endl;\n\t\t}\n\t\t\n};//三角形类的定义结束，定义了三角形的各种属性和可实施的操作\n\nint main()\n{\tdouble x,y,z;\n\tcin>>x>>y>>z;\n\tTri tri(x,y,z);\n\t\n\tif(x+y>z&&y+z>x&&x+z>y)\n\t\ttri.Show();  //输出这两个三角形的参数\n\telse\n\t\tcout<<\"不构成三角形!\"<<endl;\n\t\n}\n```\n\n\n\n\n\n------\n\n\n\n### 3.设计一个Time类\n\n**【问题描述】**\n\n定义了一个以hours, minutes和seconds作为数据成员的Time类。设计了成员函数将两个Time对象相加（即时间相加），并进行相应的检查，查看增加的分钟数及秒数是否大于59。如果秒数大于59，则分钟数向前递增1。类似地，如果分钟数大于59，则小时数向前增1。\n\n**【输入形式】**\n\n输入两个由时、分、秒构成的时间。 \n\n**【输出形式】**\n\n输出输入的两个时间相加后的时间\n\n **【样例输入】**\n\n  2 34 45  1 47 56\n\n**【样例输出】**\n\n  the result is:4:22:41\n\n**【样例输入】**\n\n​    2 67 100  1 56 200\n\n**【样例输出】**\n\n  the result is:5:8:0\n\n\n\n```c++\n#include<iostream>\nusing namespace std; \n\nclass Time\n{\n\tprivate:\n\t\t  int hours, minutes, seconds;\n\tpublic:\n\t\tvoid get_time()\n\t\t{\n\t\t    cin>>hours>>minutes>>seconds;\n\t\t}\n\t\t\n\t\tvoid display_time()\n\t\t{\n\t\t    cout<<hours<<':'<<minutes<<':'<<seconds<<endl;\n\t\t}\n\t\t\n\t\tvoid add_time(Time & t1, Time & t2)\n\t\t{\tint tmp; \n\t\t    hours=t1.hours+t2.hours;\n\t\t    minutes=t1.minutes+t2.minutes;\n\t\t    seconds=t1.seconds+t2.seconds;\n\t\t    if(seconds>=60)\n\t\t    {  tmp=seconds/60;\n\t\t       seconds-=tmp*60;\n\t\t       minutes=minutes+tmp;\n\t\t    }\n\t\t    if(minutes>=60)\n\t\t    {  tmp=minutes/60;\n\t\t       minutes-=tmp*60;\n\t\t       hours=hours+tmp;\n\t\t    }\n\t\t}\n};\n\nint main()\n{\n\t   Time one, two, three;\n\t   //cout<<\"Enter the first time(hours minutes seconds):\";\n\t   one.get_time();\n\t   //cout<<\"Enter the second time(hours minutes seconds):\";\n\t   two.get_time();\n\t   three.add_time(one,two);\n\t   cout<<\"the result is:\";\n\t   three.display_time();\n}\n\n```\n\n------\n\n\n\n### 4.datatype(数据类型)类\n\n**【问题描述】**\n\n声明一个datatype(数据类型)类，该类能够根据用户的输入，确定输入的数据类型，能处理包含字符型、整形、浮点型3种类型的数据，并给出合理的输出。提示：需要进行构造函数的重载\n\n**【输入形式】**\n\n给用户选择，当输入1时，选择输入整型；输入2时，输入字符型；选择3时，输入浮点型。不考虑其他错误情况\n\n**【输出形式】**\n\n输入该数据以及该数据的类型\n\n**【样例输入1】**\n\n2c\n\n**【样例输出1】**\n\ncharacter:c\n\n**【样例输入2】**\n\n112\n\n**【样例输出2】**\n\nint:12\n\n**【样例输入3】**\n\n31.44F\n\n**【样例输出3】**\n\nfloat:1.44\n\n\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass DataType{\n\tenum\n\t{\n\t\tcharacter,\n\t\tinteger,\n\t\tfloating_point\n\t} vartype;\n\tunion \n\t{\n\t\tchar c;\n\t\tint i;\n\t\tfloat f;\n\t};\n\tpublic:\n\t\tDataType(char ch) \n\t\t{\n\t\t\tvartype = character;\n\t\t\tc = ch;\n\t\t}\n\t\t\n\t\tDataType(int ii) \n\t\t{\n\t\t\tvartype = integer;\n\t\t\ti = ii;\n\t\t}\n\t\t\n\t\tDataType(float ff) \n\t\t{\n\t\t\tvartype = floating_point;\n\t\t\tf = ff;\n\t\t}\n\t\tvoid print();\n};\n\nvoid DataType::print() \n{\n\tswitch (vartype) \n\t{\n\t    case character:\n\t\t\tcout << \"字符型: \" << c << endl;\n\t\t\tbreak;\n\t    case integer:\n\t\t\tcout << \"整型: \" << i << endl;\n\t\t\tbreak;\n\t    case floating_point:\n\t\t\tcout << \"浮点型: \" << f << endl;\n\t\t\tbreak;\n\t}\n}\n\nint main() \n{\tDataType a('c'), b(12), c(1.44F);\n\ta.print();\n\tb.print();\n\tc.print();\n\treturn 0;\n}\n```\n\n\n\n------\n\n### 5.复数类Complex\n\n**【问题描述】**\n\n定义一个复数类，使得下面的代码能够工作：    \n\nComplex c1(3,5);   \n\n Complex c2=4.5;   \n\n c1.add(c2);    \n\n c1.show(); \n\n**【输入形式】**\n\n无 \n\n**【输出形式】** \n\nc1=3 + 5i \n\nc2=4.5 + 0i  \n\nc1+c2=7.5 + 5i\n\n\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass Complex {\n\tpublic:\n\t\tComplex(double r, double i) :real(r), image(i) { }\n\t\tComplex(double r) :real(r), image(0) {}\n\t\tvoid show();\n\t\tvoid add(Complex c2);\n\t\n\tprivate:\n\t\tdouble real;\n\t\tdouble image;\n};\nvoid Complex::add(Complex c2) {\n\treal += c2.real;\n\timage += c2.image;\n}\n\nvoid Complex::show() {\n\tcout << real << \"+\";\n\tcout << image << \"i\";\n\tcout << endl;\n}\n\nint main() {\n\tComplex c1(3, 5);\n\tComplex c2=4.5;\n\tcout<<\"c1=\";\n\tc1.show();\n\tcout<<\"c2=\";\n\tc2.show();\n\tc1.add(c2);\n\tcout<<\"c1+c2=\";\n\tc1.show();\n\treturn 0;\n}\n```\n\n\n\n------\n\n### 6.计算由圆和正方形构成的阴影部分的面积\n\n**【问题描述】**\n\n定义一个圆形类，属性有半径和相应的成员函数。然后定义一个正方形类，属性有边长和相应的成员函数。再编写一个如下图所示的组合类，由一个正方型和一个圆形组成，要求该组合类能求出阴影部分面积和周长。\n\n![image.png](http://jsjjs.ctbu.edu.cn/userfiles/image/2020/1586088754215004939.png)\n\n**【输入形式】**\n\n无 \n\n**【输出形式】** \n\n 自定义图形的面积49.2656  自定义图形的周长29.1328  自定义图形的面积109.098  自定义图形的周长45.6992\n\n\n\n```c++\n#include <iostream>\nusing namespace std; \n\nconst double  PI=3.1416;\n/**********Program**********/\nclass Box  //正方形类 \n{\n\tprivate:\n\t\tint A;\n\tpublic:\n\t\tBox( ){ }  //默认构造函数 \n\t\tBox(int x){\tA=x;}  //构造函数 \n\t\tvoid set(double a){ A=a;}  //设置边长 \n\t\tdouble S(){\treturn A*A;\t}  //求面积 \n\t\tdouble BL(){\treturn 4*A;\t}  //求周长 \n};\n\nclass circle  //圆类 \n{\n\tprivate:\n\t    int B;\n\tpublic:\n\t  \tcircle( ){ }; //默认构造函数 \n\t\tcircle(int x){B=x;} //构造函数\n\t\tvoid set(double b){ B=b;} //设置半径\n\t\tdouble CL(){\treturn 2*PI*B;\t} //求周长 \n\t\tdouble S(){ return PI*B*B;}   //求面积\n};\n\nclass NewStyle  //组合类 \n{\n\tprivate:\n\t\tcircle A;\n\t\tBox B;\n\tpublic:\n\t\tNewStyle( ) {} //默认构造函数\n\t\tNewStyle(circle x,Box y):A(x),B(y){}  //构造函数\n\t\tvoid set(circle x,Box y){ A=x;B=y;}  //设置组合图形 \n\t\tdouble S(){\treturn A.S()-B.S();}     //求面积\n\t\tdouble L(){\treturn A.CL()+B.BL();};  //求周长\n} ; \n/**********  End  **********/\n \nint main()\n{\n    circle A(4);  //圆的半径为4\n    Box B(1);   //正方形的边长为1\n    NewStyle C(A,B);  \n    cout<<\"自定义图形的面积\"<<C.S()<<endl; \n    cout<<\"自定义图形的周长\"<<C.L()<<endl; \n    A.set(6);   //圆的半径变为6\n    B.set(2);   //正方形的边长变为2\n    C.set(A,B);\n    cout<<\"自定义图形的面积\"<<C.S()<<endl; \n    cout<<\"自定义图形的周长\"<<C.L()<<endl; \n    return 0;\n}  \n\n```\n\n\n\n------\n\n### 7.CPU类\n\n**【问题描述】**\n\n声明一个CPU类。包含等级(rank)、频率(frequency)、电压(voltage)等属性，有两个公有成员函数run、stop，分别提示“CPU开始运行!”和“CPU停止运行!”。其中，rank为枚举类型CPU_Rank，声明为enum CPU_Rank{ P1=1, P2, P3, P4, P5, P6, P7 }; frequency为单位是MHz的整型数，voltage为浮点型的电压值。用2个CPU对象进行测试观察构造函数和析构函数的调用顺序。\n\n**【输入形式】**\n\n输入CPU的等级，1表示P1，3代表P3\n\n**【输出形式】**\n\nCPU对象的相关信息：构造函数、析构函数的调用情况，CPU对象的运行状况及CPU的等级\n\n**【样例输入1】**\n\n  2 5 \n\n**【样例输出1】** \n\n 构造了一个CPU! \n\n 构造了一个CPU! \n\n CPU开始运行! \n\n 等级为:2  \n\nCPU停止运行!\n\n  CPU开始运行!  \n\n等级为:5  \n\nCPU停止运行!\n\n 析构了一个CPU!  \n\n析构了一个CPU!\n\n**【样例输入2】** \n\n 1 7 \n\n**【样例输出2】** \n\n 构造了一个CPU!  \n\n构造了一个CPU!  \n\nCPU开始运行!  \n\n等级为:1 \n\n CPU停止运行!  \n\nCPU开始运行!  \n\n等级为:7  \n\nCPU停止运行!  \n\n析构了一个CPU!  \n\n析构了一个CPU! \n\n\n\n```c++\n#include <iostream>\nusing namespace std;\n\nenum CPU_Rank {P1=1,P2,P3,P4,P5,P6,P7};\nclass CPU\n{\n\tprivate:\n\t\tCPU_Rank rank;\n\t\tint frequency;\n\t\tfloat voltage;\n\tpublic:\n\t    CPU (CPU_Rank r, int f, float v)\n\t\t{\n\t\t\trank = r;\n\t\t\tfrequency = f;\n\t\t\tvoltage = v;\n\t\t\tcout << \"构造了一个CPU!\" << endl;\n\t\t}\n\t\t\n\t\t~CPU () { cout << \"析构了一个CPU!\" << endl; }\n\t\n\t    CPU_Rank GetRank() const { return rank; }\n\t    int GetFrequency() const { return frequency; }\n\t\tfloat GetVoltage() const { return voltage; }\n\t\n\t    void SetRank(CPU_Rank r) { rank = r; }\n\t    void SetFrequency(int f) { frequency = f; }\n\t    void SetVoltage(float v) { voltage = v; }\n\t\n\t    void Run() {cout << \"CPU开始运行!\" << \"\\n等级为:\"<<rank<<endl; }\n\t\tvoid Stop() {cout << \"CPU停止运行!\" << endl; }\n};\n\nint main()\n{\n\tint r1,r2;\n\tcin>>r1>>r2;\n\tCPU a((CPU_Rank)r1,300,2.8);\n\tCPU b((CPU_Rank)r2,800,8.8);\n\ta.Run();\n\ta.Stop();\n\tb.Run();\n\tb.Stop();\n}\n```\n\n\n\n持续更新中","slug":"C-编程题目整合","published":true,"updated":"2020-04-26T16:18:14.999Z","_id":"clq6dy48a000eikw0vvn61mq2","comments":true,"layout":"post","photos":[],"link":"","html":"<p><strong>就从第四章类与对象开始吧，前面的章节和c差不多。</strong></p>\n<h3 id=\"1-点类定义和使用\"><a href=\"#1-点类定义和使用\" class=\"headerlink\" title=\"1.点类定义和使用\"></a>1.点类定义和使用</h3><p><strong>【问题描述】</strong></p>\n<p>定义一个点类，该类包含整形坐标x,y以及用于设置坐标值的函数，名为setxy（）参数自行确定，以及用于显示坐标的函数displayxy()参数自行设置。合理编写主函数，能够实现（3，4）以及（5，6）固定两个点对象的参数设置，以及信息输出</p>\n<p><strong>【输入形式】</strong></p>\n<p>无数据输入，请一定使用类的定义以及对象的创建的相关知识</p>\n<p><strong>【输出形式】</strong></p>\n<p>输出两个固定点的相关信息</p>\n<p><strong>【样例输入】</strong></p>\n<p><strong>【样例输出】</strong></p>\n<p>The first point is:(3,4)</p>\n<p>The second point is:(5,6)</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include<iostream>\nusing namespace std;\nclass Point {\n    public:\n              Point(int a,int b) \n              {     x=a;\n                  y=b;\n            } \n          void setxy(int a,int b)\n          {\n                x=a;\n                y=b;\n          }\n                  void display()\n         {\n             cout<<\"The first point is\"<<\":\"<<\"(\"<<x<<\",\"<<y<<\")\"<<endl;\n             //cout<<\"The second point is\"<<\":\"<<\"(\"<<5<<\",\"<<6<<\")\"<<endl;\n         }\n    private: \n        int x,y;\n};\nint main()\n{\n    //int a,b,c,d;\n    Point s1(3,4);\n    Point s2(5,6);\n    //s.setxy(3,4);\n    //s.display();\n    //s.setxy(5,6);\n    s1.display();\n    s2.display();\n    return 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"2-三角形类\"><a href=\"#2-三角形类\" class=\"headerlink\" title=\"2.三角形类\"></a>2.三角形类</h3><p><strong>【问题描述】</strong></p>\n<p>定义一个描述三角形的类Tri，其具体要求为：  </p>\n<p>（1）私有数据成员为三角形的三边 </p>\n<p> （2）公有成员函数      构造函数：用以初始化指定的三角形对象；求三角形的边长的成员函数；求三角形面积的成员函数；输出三角形各种参数的成员函数即用以输出三角形对象的边长、周长和面积。</p>\n<p><strong>【输入形式】</strong></p>\n<p>输入三角形的三边长 【输出形式】若构成三角形，输出三角形的边长、周长及面积，否则输出“不构成三角形!” </p>\n<p><strong>【样例输入1】</strong></p>\n<p>  3 4 5 </p>\n<p><strong>【样例输出1】</strong>    </p>\n<p>三角形的边长:3 4 5  三角形的周长:12  三角形的面积:6</p>\n<p><strong>【样例输入1】</strong> </p>\n<p> 1 2 3 </p>\n<p><strong>【样例输出1】</strong>   </p>\n<p> 不构成三角形!</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include<iostream>\n#include<math.h>\nusing namespace std; \n\nclass Tri\n{\n        double a,b,c;  //定义三角形的三边\n    public:\n        Tri(double x, double y, double z) //构造函数，初始化三边\n        {        a=x; b=y;c=z;        }\n\n        double Peri()  //返回三角形的周长\n        {        return (a+b+c);        }\n\n        double Area()  //返回三角形的面积\n        {    double s=Peri()/2;\n            double area=sqrt(s*(s-a)*(s-b)*(s-c));\n            return area;\n        }\n\n        void Show() //输出三角形的参数\n        {    cout<<\"三角形的边长:\"<<a<<' '<<b<<' '<<c<<endl;\n            cout<<\"三角形的周长:\"<<Peri()<<endl;\n            cout<<\"三角形的面积:\"<<Area()<<endl<<endl;\n        }\n\n};//三角形类的定义结束，定义了三角形的各种属性和可实施的操作\n\nint main()\n{    double x,y,z;\n    cin>>x>>y>>z;\n    Tri tri(x,y,z);\n\n    if(x+y>z&&y+z>x&&x+z>y)\n        tri.Show();  //输出这两个三角形的参数\n    else\n        cout<<\"不构成三角形!\"<<endl;\n\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"3-设计一个Time类\"><a href=\"#3-设计一个Time类\" class=\"headerlink\" title=\"3.设计一个Time类\"></a>3.设计一个Time类</h3><p><strong>【问题描述】</strong></p>\n<p>定义了一个以hours, minutes和seconds作为数据成员的Time类。设计了成员函数将两个Time对象相加（即时间相加），并进行相应的检查，查看增加的分钟数及秒数是否大于59。如果秒数大于59，则分钟数向前递增1。类似地，如果分钟数大于59，则小时数向前增1。</p>\n<p><strong>【输入形式】</strong></p>\n<p>输入两个由时、分、秒构成的时间。 </p>\n<p><strong>【输出形式】</strong></p>\n<p>输出输入的两个时间相加后的时间</p>\n<p> <strong>【样例输入】</strong></p>\n<p>  2 34 45  1 47 56</p>\n<p><strong>【样例输出】</strong></p>\n<p>  the result is:4:22:41</p>\n<p><strong>【样例输入】</strong></p>\n<p>​    2 67 100  1 56 200</p>\n<p><strong>【样例输出】</strong></p>\n<p>  the result is:5:8:0</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include<iostream>\nusing namespace std; \n\nclass Time\n{\n    private:\n          int hours, minutes, seconds;\n    public:\n        void get_time()\n        {\n            cin>>hours>>minutes>>seconds;\n        }\n\n        void display_time()\n        {\n            cout<<hours<<':'<<minutes<<':'<<seconds<<endl;\n        }\n\n        void add_time(Time & t1, Time & t2)\n        {    int tmp; \n            hours=t1.hours+t2.hours;\n            minutes=t1.minutes+t2.minutes;\n            seconds=t1.seconds+t2.seconds;\n            if(seconds>=60)\n            {  tmp=seconds/60;\n               seconds-=tmp*60;\n               minutes=minutes+tmp;\n            }\n            if(minutes>=60)\n            {  tmp=minutes/60;\n               minutes-=tmp*60;\n               hours=hours+tmp;\n            }\n        }\n};\n\nint main()\n{\n       Time one, two, three;\n       //cout<<\"Enter the first time(hours minutes seconds):\";\n       one.get_time();\n       //cout<<\"Enter the second time(hours minutes seconds):\";\n       two.get_time();\n       three.add_time(one,two);\n       cout<<\"the result is:\";\n       three.display_time();\n}\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"4-datatype-数据类型-类\"><a href=\"#4-datatype-数据类型-类\" class=\"headerlink\" title=\"4.datatype(数据类型)类\"></a>4.datatype(数据类型)类</h3><p><strong>【问题描述】</strong></p>\n<p>声明一个datatype(数据类型)类，该类能够根据用户的输入，确定输入的数据类型，能处理包含字符型、整形、浮点型3种类型的数据，并给出合理的输出。提示：需要进行构造函数的重载</p>\n<p><strong>【输入形式】</strong></p>\n<p>给用户选择，当输入1时，选择输入整型；输入2时，输入字符型；选择3时，输入浮点型。不考虑其他错误情况</p>\n<p><strong>【输出形式】</strong></p>\n<p>输入该数据以及该数据的类型</p>\n<p><strong>【样例输入1】</strong></p>\n<p>2c</p>\n<p><strong>【样例输出1】</strong></p>\n<p>character:c</p>\n<p><strong>【样例输入2】</strong></p>\n<p>112</p>\n<p><strong>【样例输出2】</strong></p>\n<p>int:12</p>\n<p><strong>【样例输入3】</strong></p>\n<p>31.44F</p>\n<p><strong>【样例输出3】</strong></p>\n<p>float:1.44</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include <iostream>\nusing namespace std;\n\nclass DataType{\n    enum\n    {\n        character,\n        integer,\n        floating_point\n    } vartype;\n    union \n    {\n        char c;\n        int i;\n        float f;\n    };\n    public:\n        DataType(char ch) \n        {\n            vartype = character;\n            c = ch;\n        }\n\n        DataType(int ii) \n        {\n            vartype = integer;\n            i = ii;\n        }\n\n        DataType(float ff) \n        {\n            vartype = floating_point;\n            f = ff;\n        }\n        void print();\n};\n\nvoid DataType::print() \n{\n    switch (vartype) \n    {\n        case character:\n            cout << \"字符型: \" << c << endl;\n            break;\n        case integer:\n            cout << \"整型: \" << i << endl;\n            break;\n        case floating_point:\n            cout << \"浮点型: \" << f << endl;\n            break;\n    }\n}\n\nint main() \n{    DataType a('c'), b(12), c(1.44F);\n    a.print();\n    b.print();\n    c.print();\n    return 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"5-复数类Complex\"><a href=\"#5-复数类Complex\" class=\"headerlink\" title=\"5.复数类Complex\"></a>5.复数类Complex</h3><p><strong>【问题描述】</strong></p>\n<p>定义一个复数类，使得下面的代码能够工作：    </p>\n<p>Complex c1(3,5);   </p>\n<p> Complex c2=4.5;   </p>\n<p> c1.add(c2);    </p>\n<p> c1.show(); </p>\n<p><strong>【输入形式】</strong></p>\n<p>无 </p>\n<p><strong>【输出形式】</strong> </p>\n<p>c1=3 + 5i </p>\n<p>c2=4.5 + 0i  </p>\n<p>c1+c2=7.5 + 5i</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include <iostream>\nusing namespace std;\n\nclass Complex {\n    public:\n        Complex(double r, double i) :real(r), image(i) { }\n        Complex(double r) :real(r), image(0) {}\n        void show();\n        void add(Complex c2);\n\n    private:\n        double real;\n        double image;\n};\nvoid Complex::add(Complex c2) {\n    real += c2.real;\n    image += c2.image;\n}\n\nvoid Complex::show() {\n    cout << real << \"+\";\n    cout << image << \"i\";\n    cout << endl;\n}\n\nint main() {\n    Complex c1(3, 5);\n    Complex c2=4.5;\n    cout<<\"c1=\";\n    c1.show();\n    cout<<\"c2=\";\n    c2.show();\n    c1.add(c2);\n    cout<<\"c1+c2=\";\n    c1.show();\n    return 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"6-计算由圆和正方形构成的阴影部分的面积\"><a href=\"#6-计算由圆和正方形构成的阴影部分的面积\" class=\"headerlink\" title=\"6.计算由圆和正方形构成的阴影部分的面积\"></a>6.计算由圆和正方形构成的阴影部分的面积</h3><p><strong>【问题描述】</strong></p>\n<p>定义一个圆形类，属性有半径和相应的成员函数。然后定义一个正方形类，属性有边长和相应的成员函数。再编写一个如下图所示的组合类，由一个正方型和一个圆形组成，要求该组合类能求出阴影部分面积和周长。</p>\n<p><img src=\"http://jsjjs.ctbu.edu.cn/userfiles/image/2020/1586088754215004939.png\" alt=\"image.png\"></p>\n<p><strong>【输入形式】</strong></p>\n<p>无 </p>\n<p><strong>【输出形式】</strong> </p>\n<p> 自定义图形的面积49.2656  自定义图形的周长29.1328  自定义图形的面积109.098  自定义图形的周长45.6992</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include <iostream>\nusing namespace std; \n\nconst double  PI=3.1416;\n/**********Program**********/\nclass Box  //正方形类 \n{\n    private:\n        int A;\n    public:\n        Box( ){ }  //默认构造函数 \n        Box(int x){    A=x;}  //构造函数 \n        void set(double a){ A=a;}  //设置边长 \n        double S(){    return A*A;    }  //求面积 \n        double BL(){    return 4*A;    }  //求周长 \n};\n\nclass circle  //圆类 \n{\n    private:\n        int B;\n    public:\n          circle( ){ }; //默认构造函数 \n        circle(int x){B=x;} //构造函数\n        void set(double b){ B=b;} //设置半径\n        double CL(){    return 2*PI*B;    } //求周长 \n        double S(){ return PI*B*B;}   //求面积\n};\n\nclass NewStyle  //组合类 \n{\n    private:\n        circle A;\n        Box B;\n    public:\n        NewStyle( ) {} //默认构造函数\n        NewStyle(circle x,Box y):A(x),B(y){}  //构造函数\n        void set(circle x,Box y){ A=x;B=y;}  //设置组合图形 \n        double S(){    return A.S()-B.S();}     //求面积\n        double L(){    return A.CL()+B.BL();};  //求周长\n} ; \n/**********  End  **********/\n\nint main()\n{\n    circle A(4);  //圆的半径为4\n    Box B(1);   //正方形的边长为1\n    NewStyle C(A,B);  \n    cout<<\"自定义图形的面积\"<<C.S()<<endl; \n    cout<<\"自定义图形的周长\"<<C.L()<<endl; \n    A.set(6);   //圆的半径变为6\n    B.set(2);   //正方形的边长变为2\n    C.set(A,B);\n    cout<<\"自定义图形的面积\"<<C.S()<<endl; \n    cout<<\"自定义图形的周长\"<<C.L()<<endl; \n    return 0;\n}  \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"7-CPU类\"><a href=\"#7-CPU类\" class=\"headerlink\" title=\"7.CPU类\"></a>7.CPU类</h3><p><strong>【问题描述】</strong></p>\n<p>声明一个CPU类。包含等级(rank)、频率(frequency)、电压(voltage)等属性，有两个公有成员函数run、stop，分别提示“CPU开始运行!”和“CPU停止运行!”。其中，rank为枚举类型CPU_Rank，声明为enum CPU_Rank{ P1=1, P2, P3, P4, P5, P6, P7 }; frequency为单位是MHz的整型数，voltage为浮点型的电压值。用2个CPU对象进行测试观察构造函数和析构函数的调用顺序。</p>\n<p><strong>【输入形式】</strong></p>\n<p>输入CPU的等级，1表示P1，3代表P3</p>\n<p><strong>【输出形式】</strong></p>\n<p>CPU对象的相关信息：构造函数、析构函数的调用情况，CPU对象的运行状况及CPU的等级</p>\n<p><strong>【样例输入1】</strong></p>\n<p>  2 5 </p>\n<p><strong>【样例输出1】</strong> </p>\n<p> 构造了一个CPU! </p>\n<p> 构造了一个CPU! </p>\n<p> CPU开始运行! </p>\n<p> 等级为:2  </p>\n<p>CPU停止运行!</p>\n<p>  CPU开始运行!  </p>\n<p>等级为:5  </p>\n<p>CPU停止运行!</p>\n<p> 析构了一个CPU!  </p>\n<p>析构了一个CPU!</p>\n<p><strong>【样例输入2】</strong> </p>\n<p> 1 7 </p>\n<p><strong>【样例输出2】</strong> </p>\n<p> 构造了一个CPU!  </p>\n<p>构造了一个CPU!  </p>\n<p>CPU开始运行!  </p>\n<p>等级为:1 </p>\n<p> CPU停止运行!  </p>\n<p>CPU开始运行!  </p>\n<p>等级为:7  </p>\n<p>CPU停止运行!  </p>\n<p>析构了一个CPU!  </p>\n<p>析构了一个CPU! </p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include <iostream>\nusing namespace std;\n\nenum CPU_Rank {P1=1,P2,P3,P4,P5,P6,P7};\nclass CPU\n{\n    private:\n        CPU_Rank rank;\n        int frequency;\n        float voltage;\n    public:\n        CPU (CPU_Rank r, int f, float v)\n        {\n            rank = r;\n            frequency = f;\n            voltage = v;\n            cout << \"构造了一个CPU!\" << endl;\n        }\n\n        ~CPU () { cout << \"析构了一个CPU!\" << endl; }\n\n        CPU_Rank GetRank() const { return rank; }\n        int GetFrequency() const { return frequency; }\n        float GetVoltage() const { return voltage; }\n\n        void SetRank(CPU_Rank r) { rank = r; }\n        void SetFrequency(int f) { frequency = f; }\n        void SetVoltage(float v) { voltage = v; }\n\n        void Run() {cout << \"CPU开始运行!\" << \"\\n等级为:\"<<rank<<endl; }\n        void Stop() {cout << \"CPU停止运行!\" << endl; }\n};\n\nint main()\n{\n    int r1,r2;\n    cin>>r1>>r2;\n    CPU a((CPU_Rank)r1,300,2.8);\n    CPU b((CPU_Rank)r2,800,8.8);\n    a.Run();\n    a.Stop();\n    b.Run();\n    b.Stop();\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>持续更新中</p>\n","excerpt":"","more":"<p><strong>就从第四章类与对象开始吧，前面的章节和c差不多。</strong></p>\n<h3 id=\"1-点类定义和使用\"><a href=\"#1-点类定义和使用\" class=\"headerlink\" title=\"1.点类定义和使用\"></a>1.点类定义和使用</h3><p><strong>【问题描述】</strong></p>\n<p>定义一个点类，该类包含整形坐标x,y以及用于设置坐标值的函数，名为setxy（）参数自行确定，以及用于显示坐标的函数displayxy()参数自行设置。合理编写主函数，能够实现（3，4）以及（5，6）固定两个点对象的参数设置，以及信息输出</p>\n<p><strong>【输入形式】</strong></p>\n<p>无数据输入，请一定使用类的定义以及对象的创建的相关知识</p>\n<p><strong>【输出形式】</strong></p>\n<p>输出两个固定点的相关信息</p>\n<p><strong>【样例输入】</strong></p>\n<p><strong>【样例输出】</strong></p>\n<p>The first point is:(3,4)</p>\n<p>The second point is:(5,6)</p>\n<pre><code class=\"c++\">#include&lt;iostream&gt;\nusing namespace std;\nclass Point {\n    public:\n              Point(int a,int b) \n              {     x=a;\n                  y=b;\n            } \n          void setxy(int a,int b)\n          {\n                x=a;\n                y=b;\n          }\n                  void display()\n         {\n             cout&lt;&lt;&quot;The first point is&quot;&lt;&lt;&quot;:&quot;&lt;&lt;&quot;(&quot;&lt;&lt;x&lt;&lt;&quot;,&quot;&lt;&lt;y&lt;&lt;&quot;)&quot;&lt;&lt;endl;\n             //cout&lt;&lt;&quot;The second point is&quot;&lt;&lt;&quot;:&quot;&lt;&lt;&quot;(&quot;&lt;&lt;5&lt;&lt;&quot;,&quot;&lt;&lt;6&lt;&lt;&quot;)&quot;&lt;&lt;endl;\n         }\n    private: \n        int x,y;\n};\nint main()\n{\n    //int a,b,c,d;\n    Point s1(3,4);\n    Point s2(5,6);\n    //s.setxy(3,4);\n    //s.display();\n    //s.setxy(5,6);\n    s1.display();\n    s2.display();\n    return 0;\n}</code></pre>\n<hr>\n<h3 id=\"2-三角形类\"><a href=\"#2-三角形类\" class=\"headerlink\" title=\"2.三角形类\"></a>2.三角形类</h3><p><strong>【问题描述】</strong></p>\n<p>定义一个描述三角形的类Tri，其具体要求为：  </p>\n<p>（1）私有数据成员为三角形的三边 </p>\n<p> （2）公有成员函数      构造函数：用以初始化指定的三角形对象；求三角形的边长的成员函数；求三角形面积的成员函数；输出三角形各种参数的成员函数即用以输出三角形对象的边长、周长和面积。</p>\n<p><strong>【输入形式】</strong></p>\n<p>输入三角形的三边长 【输出形式】若构成三角形，输出三角形的边长、周长及面积，否则输出“不构成三角形!” </p>\n<p><strong>【样例输入1】</strong></p>\n<p>  3 4 5 </p>\n<p><strong>【样例输出1】</strong>    </p>\n<p>三角形的边长:3 4 5  三角形的周长:12  三角形的面积:6</p>\n<p><strong>【样例输入1】</strong> </p>\n<p> 1 2 3 </p>\n<p><strong>【样例输出1】</strong>   </p>\n<p> 不构成三角形!</p>\n<pre><code class=\"c++\">#include&lt;iostream&gt;\n#include&lt;math.h&gt;\nusing namespace std; \n\nclass Tri\n{\n        double a,b,c;  //定义三角形的三边\n    public:\n        Tri(double x, double y, double z) //构造函数，初始化三边\n        {        a=x; b=y;c=z;        }\n\n        double Peri()  //返回三角形的周长\n        {        return (a+b+c);        }\n\n        double Area()  //返回三角形的面积\n        {    double s=Peri()/2;\n            double area=sqrt(s*(s-a)*(s-b)*(s-c));\n            return area;\n        }\n\n        void Show() //输出三角形的参数\n        {    cout&lt;&lt;&quot;三角形的边长:&quot;&lt;&lt;a&lt;&lt;&#39; &#39;&lt;&lt;b&lt;&lt;&#39; &#39;&lt;&lt;c&lt;&lt;endl;\n            cout&lt;&lt;&quot;三角形的周长:&quot;&lt;&lt;Peri()&lt;&lt;endl;\n            cout&lt;&lt;&quot;三角形的面积:&quot;&lt;&lt;Area()&lt;&lt;endl&lt;&lt;endl;\n        }\n\n};//三角形类的定义结束，定义了三角形的各种属性和可实施的操作\n\nint main()\n{    double x,y,z;\n    cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;\n    Tri tri(x,y,z);\n\n    if(x+y&gt;z&amp;&amp;y+z&gt;x&amp;&amp;x+z&gt;y)\n        tri.Show();  //输出这两个三角形的参数\n    else\n        cout&lt;&lt;&quot;不构成三角形!&quot;&lt;&lt;endl;\n\n}</code></pre>\n<hr>\n<h3 id=\"3-设计一个Time类\"><a href=\"#3-设计一个Time类\" class=\"headerlink\" title=\"3.设计一个Time类\"></a>3.设计一个Time类</h3><p><strong>【问题描述】</strong></p>\n<p>定义了一个以hours, minutes和seconds作为数据成员的Time类。设计了成员函数将两个Time对象相加（即时间相加），并进行相应的检查，查看增加的分钟数及秒数是否大于59。如果秒数大于59，则分钟数向前递增1。类似地，如果分钟数大于59，则小时数向前增1。</p>\n<p><strong>【输入形式】</strong></p>\n<p>输入两个由时、分、秒构成的时间。 </p>\n<p><strong>【输出形式】</strong></p>\n<p>输出输入的两个时间相加后的时间</p>\n<p> <strong>【样例输入】</strong></p>\n<p>  2 34 45  1 47 56</p>\n<p><strong>【样例输出】</strong></p>\n<p>  the result is:4:22:41</p>\n<p><strong>【样例输入】</strong></p>\n<p>​    2 67 100  1 56 200</p>\n<p><strong>【样例输出】</strong></p>\n<p>  the result is:5:8:0</p>\n<pre><code class=\"c++\">#include&lt;iostream&gt;\nusing namespace std; \n\nclass Time\n{\n    private:\n          int hours, minutes, seconds;\n    public:\n        void get_time()\n        {\n            cin&gt;&gt;hours&gt;&gt;minutes&gt;&gt;seconds;\n        }\n\n        void display_time()\n        {\n            cout&lt;&lt;hours&lt;&lt;&#39;:&#39;&lt;&lt;minutes&lt;&lt;&#39;:&#39;&lt;&lt;seconds&lt;&lt;endl;\n        }\n\n        void add_time(Time &amp; t1, Time &amp; t2)\n        {    int tmp; \n            hours=t1.hours+t2.hours;\n            minutes=t1.minutes+t2.minutes;\n            seconds=t1.seconds+t2.seconds;\n            if(seconds&gt;=60)\n            {  tmp=seconds/60;\n               seconds-=tmp*60;\n               minutes=minutes+tmp;\n            }\n            if(minutes&gt;=60)\n            {  tmp=minutes/60;\n               minutes-=tmp*60;\n               hours=hours+tmp;\n            }\n        }\n};\n\nint main()\n{\n       Time one, two, three;\n       //cout&lt;&lt;&quot;Enter the first time(hours minutes seconds):&quot;;\n       one.get_time();\n       //cout&lt;&lt;&quot;Enter the second time(hours minutes seconds):&quot;;\n       two.get_time();\n       three.add_time(one,two);\n       cout&lt;&lt;&quot;the result is:&quot;;\n       three.display_time();\n}\n</code></pre>\n<hr>\n<h3 id=\"4-datatype-数据类型-类\"><a href=\"#4-datatype-数据类型-类\" class=\"headerlink\" title=\"4.datatype(数据类型)类\"></a>4.datatype(数据类型)类</h3><p><strong>【问题描述】</strong></p>\n<p>声明一个datatype(数据类型)类，该类能够根据用户的输入，确定输入的数据类型，能处理包含字符型、整形、浮点型3种类型的数据，并给出合理的输出。提示：需要进行构造函数的重载</p>\n<p><strong>【输入形式】</strong></p>\n<p>给用户选择，当输入1时，选择输入整型；输入2时，输入字符型；选择3时，输入浮点型。不考虑其他错误情况</p>\n<p><strong>【输出形式】</strong></p>\n<p>输入该数据以及该数据的类型</p>\n<p><strong>【样例输入1】</strong></p>\n<p>2c</p>\n<p><strong>【样例输出1】</strong></p>\n<p>character:c</p>\n<p><strong>【样例输入2】</strong></p>\n<p>112</p>\n<p><strong>【样例输出2】</strong></p>\n<p>int:12</p>\n<p><strong>【样例输入3】</strong></p>\n<p>31.44F</p>\n<p><strong>【样例输出3】</strong></p>\n<p>float:1.44</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\nusing namespace std;\n\nclass DataType{\n    enum\n    {\n        character,\n        integer,\n        floating_point\n    } vartype;\n    union \n    {\n        char c;\n        int i;\n        float f;\n    };\n    public:\n        DataType(char ch) \n        {\n            vartype = character;\n            c = ch;\n        }\n\n        DataType(int ii) \n        {\n            vartype = integer;\n            i = ii;\n        }\n\n        DataType(float ff) \n        {\n            vartype = floating_point;\n            f = ff;\n        }\n        void print();\n};\n\nvoid DataType::print() \n{\n    switch (vartype) \n    {\n        case character:\n            cout &lt;&lt; &quot;字符型: &quot; &lt;&lt; c &lt;&lt; endl;\n            break;\n        case integer:\n            cout &lt;&lt; &quot;整型: &quot; &lt;&lt; i &lt;&lt; endl;\n            break;\n        case floating_point:\n            cout &lt;&lt; &quot;浮点型: &quot; &lt;&lt; f &lt;&lt; endl;\n            break;\n    }\n}\n\nint main() \n{    DataType a(&#39;c&#39;), b(12), c(1.44F);\n    a.print();\n    b.print();\n    c.print();\n    return 0;\n}</code></pre>\n<hr>\n<h3 id=\"5-复数类Complex\"><a href=\"#5-复数类Complex\" class=\"headerlink\" title=\"5.复数类Complex\"></a>5.复数类Complex</h3><p><strong>【问题描述】</strong></p>\n<p>定义一个复数类，使得下面的代码能够工作：    </p>\n<p>Complex c1(3,5);   </p>\n<p> Complex c2=4.5;   </p>\n<p> c1.add(c2);    </p>\n<p> c1.show(); </p>\n<p><strong>【输入形式】</strong></p>\n<p>无 </p>\n<p><strong>【输出形式】</strong> </p>\n<p>c1=3 + 5i </p>\n<p>c2=4.5 + 0i  </p>\n<p>c1+c2=7.5 + 5i</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\nusing namespace std;\n\nclass Complex {\n    public:\n        Complex(double r, double i) :real(r), image(i) { }\n        Complex(double r) :real(r), image(0) {}\n        void show();\n        void add(Complex c2);\n\n    private:\n        double real;\n        double image;\n};\nvoid Complex::add(Complex c2) {\n    real += c2.real;\n    image += c2.image;\n}\n\nvoid Complex::show() {\n    cout &lt;&lt; real &lt;&lt; &quot;+&quot;;\n    cout &lt;&lt; image &lt;&lt; &quot;i&quot;;\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    Complex c1(3, 5);\n    Complex c2=4.5;\n    cout&lt;&lt;&quot;c1=&quot;;\n    c1.show();\n    cout&lt;&lt;&quot;c2=&quot;;\n    c2.show();\n    c1.add(c2);\n    cout&lt;&lt;&quot;c1+c2=&quot;;\n    c1.show();\n    return 0;\n}</code></pre>\n<hr>\n<h3 id=\"6-计算由圆和正方形构成的阴影部分的面积\"><a href=\"#6-计算由圆和正方形构成的阴影部分的面积\" class=\"headerlink\" title=\"6.计算由圆和正方形构成的阴影部分的面积\"></a>6.计算由圆和正方形构成的阴影部分的面积</h3><p><strong>【问题描述】</strong></p>\n<p>定义一个圆形类，属性有半径和相应的成员函数。然后定义一个正方形类，属性有边长和相应的成员函数。再编写一个如下图所示的组合类，由一个正方型和一个圆形组成，要求该组合类能求出阴影部分面积和周长。</p>\n<p><img src=\"http://jsjjs.ctbu.edu.cn/userfiles/image/2020/1586088754215004939.png\" alt=\"image.png\"></p>\n<p><strong>【输入形式】</strong></p>\n<p>无 </p>\n<p><strong>【输出形式】</strong> </p>\n<p> 自定义图形的面积49.2656  自定义图形的周长29.1328  自定义图形的面积109.098  自定义图形的周长45.6992</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\nusing namespace std; \n\nconst double  PI=3.1416;\n/**********Program**********/\nclass Box  //正方形类 \n{\n    private:\n        int A;\n    public:\n        Box( ){ }  //默认构造函数 \n        Box(int x){    A=x;}  //构造函数 \n        void set(double a){ A=a;}  //设置边长 \n        double S(){    return A*A;    }  //求面积 \n        double BL(){    return 4*A;    }  //求周长 \n};\n\nclass circle  //圆类 \n{\n    private:\n        int B;\n    public:\n          circle( ){ }; //默认构造函数 \n        circle(int x){B=x;} //构造函数\n        void set(double b){ B=b;} //设置半径\n        double CL(){    return 2*PI*B;    } //求周长 \n        double S(){ return PI*B*B;}   //求面积\n};\n\nclass NewStyle  //组合类 \n{\n    private:\n        circle A;\n        Box B;\n    public:\n        NewStyle( ) {} //默认构造函数\n        NewStyle(circle x,Box y):A(x),B(y){}  //构造函数\n        void set(circle x,Box y){ A=x;B=y;}  //设置组合图形 \n        double S(){    return A.S()-B.S();}     //求面积\n        double L(){    return A.CL()+B.BL();};  //求周长\n} ; \n/**********  End  **********/\n\nint main()\n{\n    circle A(4);  //圆的半径为4\n    Box B(1);   //正方形的边长为1\n    NewStyle C(A,B);  \n    cout&lt;&lt;&quot;自定义图形的面积&quot;&lt;&lt;C.S()&lt;&lt;endl; \n    cout&lt;&lt;&quot;自定义图形的周长&quot;&lt;&lt;C.L()&lt;&lt;endl; \n    A.set(6);   //圆的半径变为6\n    B.set(2);   //正方形的边长变为2\n    C.set(A,B);\n    cout&lt;&lt;&quot;自定义图形的面积&quot;&lt;&lt;C.S()&lt;&lt;endl; \n    cout&lt;&lt;&quot;自定义图形的周长&quot;&lt;&lt;C.L()&lt;&lt;endl; \n    return 0;\n}  \n</code></pre>\n<hr>\n<h3 id=\"7-CPU类\"><a href=\"#7-CPU类\" class=\"headerlink\" title=\"7.CPU类\"></a>7.CPU类</h3><p><strong>【问题描述】</strong></p>\n<p>声明一个CPU类。包含等级(rank)、频率(frequency)、电压(voltage)等属性，有两个公有成员函数run、stop，分别提示“CPU开始运行!”和“CPU停止运行!”。其中，rank为枚举类型CPU_Rank，声明为enum CPU_Rank{ P1=1, P2, P3, P4, P5, P6, P7 }; frequency为单位是MHz的整型数，voltage为浮点型的电压值。用2个CPU对象进行测试观察构造函数和析构函数的调用顺序。</p>\n<p><strong>【输入形式】</strong></p>\n<p>输入CPU的等级，1表示P1，3代表P3</p>\n<p><strong>【输出形式】</strong></p>\n<p>CPU对象的相关信息：构造函数、析构函数的调用情况，CPU对象的运行状况及CPU的等级</p>\n<p><strong>【样例输入1】</strong></p>\n<p>  2 5 </p>\n<p><strong>【样例输出1】</strong> </p>\n<p> 构造了一个CPU! </p>\n<p> 构造了一个CPU! </p>\n<p> CPU开始运行! </p>\n<p> 等级为:2  </p>\n<p>CPU停止运行!</p>\n<p>  CPU开始运行!  </p>\n<p>等级为:5  </p>\n<p>CPU停止运行!</p>\n<p> 析构了一个CPU!  </p>\n<p>析构了一个CPU!</p>\n<p><strong>【样例输入2】</strong> </p>\n<p> 1 7 </p>\n<p><strong>【样例输出2】</strong> </p>\n<p> 构造了一个CPU!  </p>\n<p>构造了一个CPU!  </p>\n<p>CPU开始运行!  </p>\n<p>等级为:1 </p>\n<p> CPU停止运行!  </p>\n<p>CPU开始运行!  </p>\n<p>等级为:7  </p>\n<p>CPU停止运行!  </p>\n<p>析构了一个CPU!  </p>\n<p>析构了一个CPU! </p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\nusing namespace std;\n\nenum CPU_Rank {P1=1,P2,P3,P4,P5,P6,P7};\nclass CPU\n{\n    private:\n        CPU_Rank rank;\n        int frequency;\n        float voltage;\n    public:\n        CPU (CPU_Rank r, int f, float v)\n        {\n            rank = r;\n            frequency = f;\n            voltage = v;\n            cout &lt;&lt; &quot;构造了一个CPU!&quot; &lt;&lt; endl;\n        }\n\n        ~CPU () { cout &lt;&lt; &quot;析构了一个CPU!&quot; &lt;&lt; endl; }\n\n        CPU_Rank GetRank() const { return rank; }\n        int GetFrequency() const { return frequency; }\n        float GetVoltage() const { return voltage; }\n\n        void SetRank(CPU_Rank r) { rank = r; }\n        void SetFrequency(int f) { frequency = f; }\n        void SetVoltage(float v) { voltage = v; }\n\n        void Run() {cout &lt;&lt; &quot;CPU开始运行!&quot; &lt;&lt; &quot;\\n等级为:&quot;&lt;&lt;rank&lt;&lt;endl; }\n        void Stop() {cout &lt;&lt; &quot;CPU停止运行!&quot; &lt;&lt; endl; }\n};\n\nint main()\n{\n    int r1,r2;\n    cin&gt;&gt;r1&gt;&gt;r2;\n    CPU a((CPU_Rank)r1,300,2.8);\n    CPU b((CPU_Rank)r2,800,8.8);\n    a.Run();\n    a.Stop();\n    b.Run();\n    b.Stop();\n}</code></pre>\n<p>持续更新中</p>\n","path":"c-bian-cheng-ti-mu-zheng-he.html","permalink":"https://www.yshawlon.cn/c-bian-cheng-ti-mu-zheng-he.html","tags":[{"name":"学习笔记","_id":"clq6dy48u0013ikw0galx0575","slug":"学习笔记","path":"tags/学习笔记/","permalink":"https://www.yshawlon.cn/tags/学习笔记/","length":9}],"categories":[{"name":"C++","_id":"clq6dy48e000hikw0uy63x2a1","slug":"C","path":"categories/C/","permalink":"https://www.yshawlon.cn/categories/C/","length":5}],"prev":{"title":"C++学习笔记整理-类与对象","date":"2020-04-26T10:53:44.000Z","summary":"抽象是对具体对象（问题）进行概括，抽出这一类对象的公共性质并加以描述的过程.","slug":"C-学习笔记整理-第四章《类与对象》","published":true,"updated":"2021-05-18T07:56:39.107Z","_id":"clq6dy48c000fikw0d22mmt5l","layout":"post","photos":[],"link":"","excerpt":"","path":"c-xue-xi-bi-ji-zheng-li-di-si-zhang-lei-yu-dui-xiang.html","permalink":"https://www.yshawlon.cn/c-xue-xi-bi-ji-zheng-li-di-si-zhang-lei-yu-dui-xiang.html","__post":true},"next":{"title":"C++学习笔记整理-数据的共享与保护","date":"2020-04-23T04:59:54.000Z","summary":"第五章数据的共享与保护,作用域是一个标识符在程序正文中有效的区域。","slug":"C-学习笔记整理-第五章《数据的共享与保护》","published":true,"updated":"2021-05-18T07:58:26.907Z","_id":"clq6dy486000aikw06ntsrm97","layout":"post","photos":[],"link":"","excerpt":"","path":"c-xue-xi-bi-ji-zheng-li-di-wu-zhang-shu-ju-de-gong-xiang-yu-bao-hu.html","permalink":"https://www.yshawlon.cn/c-xue-xi-bi-ji-zheng-li-di-wu-zhang-shu-ju-de-gong-xiang-yu-bao-hu.html","__post":true},"__post":true}