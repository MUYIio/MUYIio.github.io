{"title":"C语言编程题目整合","date":"2020-04-13T06:50:08.000Z","toc":true,"summary":"做过的题目渐渐变得生疏，索性记录在博客上，看着更直观些，好记性不如烂笔头！","source":"_posts/C语言编程题目整合.md","raw":"---\ntitle: C语言编程题目整合\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-13 14:50:08\npassword:\nsummary: 做过的题目渐渐变得生疏，索性记录在博客上，看着更直观些，好记性不如烂笔头！\ntags:\n- 学习笔记\n- 代码整合\ncategories:\n- C语言\n---\n\n\n\n\n\n**做过的题目渐渐变得生疏，索性记录在博客上，看着更直观些，好记性不如烂笔头！**\n\n------\n\n\n\n### 1.数值变换\n\n**【问题描述】**\n\n 编写一程序，从键盘输入输入一个三位正整数，然后反向输出对应的数，如果输入的数不是三位正整数，则输出－1。 \n\n**【输入形式】** \n\n从键盘输入三位的正整数。 \n\n**【输出形式】**\n\n 输出交换后的正整数值。 \n\n**【输入样例】**\n\n 356  \n\n**【输出样例】**\n\n 653 \n\n**【样例说明】**\n\n从键盘输入的正整数值为356，将该数的个位与百位互换，所得结果为653.如果输入的正整数为300，则输出为3。 \n\n**【评分标准】** \n\n结果完全正确得20分，每个测试点4分。\n\n\n\n```c\n#include <stdio.h>\nint main()\n{\n\tint a, b, c, d;\n\tscanf(\"%d\",&a);\n\tif(a>=100&&a<1000)\n\t{\n\t\tb=a/100;\t\n\t\tc=a%100/10;\n\t\td=a%10;\n\t\tif(d==0&&c==0)\n\t\t\tprintf(\"%d\",b);\n\t\telse if(d==0)\n\t\t\tprintf(\"%d%d\",c,b);\n\t\telse\n\t\t\tprintf(\"%d%d%d\",d,c,b);\n\t}\n\telse\n\t\tprintf(\"-1\");\n} \n```\n\n------\n\n\n\n### 2.sinx计算公式\n\n**【问题描述】**\n\n已知sinx的近似计算公式如下： sin x = x - x3/3! + x5/5! - x7/7! + ... + (-1)n-1x2n-1/(2n-1)! 其中x为弧度，n为正整数。编写程序根据用户输入的x和n的值，利用上述近似计算公式计算sinx的近似值，要求输出结果小数点后保留8位。\n\n**【输入形式】**\n\n从控制台输入小数x（0<=x<=20）和整数n（1<=n<=5000），两数中间用空格分隔。\n\n**【输出形式】**\n\n控制台输出公式结果：小数点后保留8位。\n\n**【样例输入1】**\n\n0.5236 4\n\n**【样例输出1】**\n\n0.50000105\n\n**【样例输入2】**\n\n0.5236 50\n\n**【样例输出2】**\n\n0.50000106\n\n**【样例说明】**\n\n输入x为0.5236，n为4，求得sinx近似计算公式的值为0.50000105，小数点后保留8位；同样，输入x为0.5236，n为50，求得sinx近似计算公式的值为0.50000106，小数点后保留8位。注意：为保证数据的准确性和一致性，**请使用double数据类型保存计算结果。**\n\n**【评分标准】**\n\n该题要求输出上述公式的计算结果，共有5个测试点\n\n\n\n```c\n# include<stdio.h>\n# include<math.h>\n\nint main()\n{\n\tdouble p=1.0,f,x;//p是阶乘中的变量，总量即分母是f \n\tdouble s=0,t=-1;\n\tdouble i,j,n;\n\tscanf(\"%lf %lf\",&x,&n);\n\ts=x;\n\tf=x;\n\tfor(i=3;i<=2*n-1;i=i+2)\n\t{\tp=p*i*(i-1);\n\t\t\n\t   \ts=s+t*pow(x,i)/p;\n\t   \tt=-t;\n\t} \n\tprintf(\"%.8lf\",s);\n }\n```\n\n------\n\n\n\n### 3.个人所得税\n\n**【问题描述】**2019年1月1月新修订的个税法正式实施，个人所得税由之前的3500元提高到了5000元，还可以减去6项专项附加扣除，主要有子女教育、继续教育、赡养老人、大病医疗、住房贷款利息和住房租金，扣除三险一金和专项附加，工资大于5000元需要缴纳个人所得税，若小于5000元则不需要缴纳。2019年5000起征点个税表如下：\n\n![1-1P91H2561V43.jpg](http://jsjjs.ctbu.edu.cn/userfiles/image/2019/15706296140540202339.jpg)\n\n假设6项专项附加扣除为零。\n\n请根据税率表编写代码，输入月收入和扣除的三险一金（单位：元），输出待交的个人所得税。\n\n**注：个税的计算方法**\n\n比如张先生在武汉工作每个月工资为10000元，公司每个月缴纳社保公积金扣除1300元，没有专项附加扣除费。那么张先生到手的工资为10000-1300-0=8700元，达到了个税起征点5000元，超出的部分按照10%的个人所得税率来计算，(8700-5000)*10%-210=160元，那么张先生一个月需要缴纳的个人所得税为160元。\n\n**【输入形式】**用户在第一行输入月收入和三险一金(单位：元），中间用空格分开，第一个数是月收入，第二个数是三险一金\n**【输出形式】**用户待交的个人所得税（单位：元），保留两位小数\n**【样例输入】**10000 1300\n**【样例输出】**160.00\n**【样例说明】**输入的两个数中，第一个表示月收入，第二个数表示扣除的三险一金;输出待交的个人所得税\n**【评分标准】**完全正确20分。提交源文件名为tax.c\n\n\n\n```c\n#include <stdio.h>\nint main()\n{\n\tint t;\n\tdouble m,l,p,tax;\n\tdouble rate,late; \n\tscanf(\"%lf%lf\",&l,&p);\n\tm=l-p-5000;\n\n\tif(m<=0)\n\t{\n\t\ttax=0;\n\t}\n\telse\n\t{\n\t\tif(m<=3000)\t\n\t\t\tt=1;\n\t\telse if(m<=12000)\n\t\t\tt=2;\n\t\telse if(m<=25000)\n\t\t\tt=3;\n\t\telse if(m<=35000)\n\t\t\tt=4;\n\t\telse if(m<=55000)\n\t\t\tt=5;\n\t\telse if(m<=80000)\n\t\t\tt=6;\n\t\telse \n\t\t\tt=7;\n\t\n\t\tswitch(t)\n\t\t{\n\t\t\tcase 1:\n\t\t\t\trate=0.03,late=0;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\trate=0.10,late=210;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\trate=0.20,late=1410;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\trate=0.25,late=2660;\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\trate=0.30,late=4410;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\trate=0.35,late=7160;\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\trate=0.45,late=15160;\t\t\n\t\t}\n\t\ttax=m*rate-late;\n\t}\n\tprintf(\"需要缴纳的个人所得税为:%.2f 元\",tax);\n\treturn 0;\n}\n```\n\n\n\n\n\n------\n\n\n\n### 4.字符串复制\n\n**【问题描述】**\n\n编写一个字符串复制函数strCopy()，将字符串1中奇数位置的字符复制到另一个字符串2中，在主函数中调用函数strCopy()并输出复制后的结果。例如，当字符串1为\"This is a C program\"，则字符串2为\"Ti saCporm\"。\n\n**【输入形式】**\n\n输入字符串 \n\n**【输出形式】**\n\n输出复制后的字符串 \n\n**【样例输入】**\n\nThis is a C Program \n\n**【样例输出】**\n\nTi saCporm \n\n```c\n#include <stdio.h>\n#include <string.h>\n\nchar *strCopy(char a[20])\n{\n    static char b[20];\n    int j = 0;\n    for (int i = 0; i < 20; i += 2, j++)\n    {\n        b[j]=a[i];\n    }\n    return b;\n}\n\nint main()\n{\n    char a[20];\n    char *p = \"\";\n\n    gets(a);\n    printf(\"%s\", strCopy(a));\n}\n```\n\n------\n\n\n\n### 5.还是三角形\n\n**【问题描述】**\n\n给定三条边，请判断三角形的类型。\n\n**【输入形式】**\n\n输入数据包含3个整数，表示三条边的长度，数据保证三条边一定能够组成三角形。\n\n**【输出形式】**\n\n请判断三条边组成的三角形类型（锐角三角形、钝角三角形、直角三角形、等腰三角形、等边三角形）。如果数据符合多种类型，则只输出优先度最高的类型（上面的五种三角形，优先级从低到高），具体输出格式参见样例。\n\n**【样例输入】**\n\n3 3 3\n\n**【样例输出】**\n\n 等边三角形\n\n\n\n```c\n#include <stdio.h>\n#include <math.h> \nint Max(int a,int b,int c)\n{    \n    int t,max;    \n    t=a>b?a:b;   \n    max=t>c?t:c;   \n    return max;\n}\n\nint Min(int a,int b,int c)\n{    \n    int t,min; \n    t=a<b?a:b; \n    min=t<c?t:c; \n    return min;\n}\n\nint Mid(int a,int b,int c)\n{   \n    int mid;    \n    mid=a>b?(a<c?a:(b>c?b:c)):(b<c?b:(a>c?a:c)); \n    return mid;\n}\n\nint main()\n{    \n    int i,n;\n\tint a,b,c,k,x,y,z;             \n\tscanf(\"%d%d%d\",&a,&b,&c);       \n\tif((a+b>c)&&(abs(a-b)<c))           \n\t{//  满足上面条件的三边可以构成三角形             \n\t\tif(a==b&&b==c)                \n\t     \tprintf(\"等边三角形\\n\");              \n\t\telse if((a==b&&c!=a)||(b==c&a!=b)||(a==c&&b!=a))           \n\t     \t\tprintf(\"等腰三角形\\n\");     \n\t\t\t else                 \n\t\t\t{                    \n\t    \t\tx=Min(a,b,c);         \n\t\t\t\ty=Mid(a,b,c);      \n\t\t\t\tz=Max(a,b,c);     \n\t\t\t\tif(x*x+y*y>z*z)                           \n\t  \t\t\t\tprintf(\"锐角三角形\\n\");                        \n    \t\t\telse if (a*a+b*b==c*c)                            \n\t  \t\t\t\tprintf(\"直角三角形\\n\");                        \n\t\t\t\telse if(x*x+y*y<z*z)                            \n\t  \t\t\t\tprintf(\"钝角三角形\\n\");                   \n    \t\t}           \n\t}       \n\telse//不满足构成三角形的条件           \n    {                \n\t\tprintf(\"这三边不能构成三角形\\n\");  \n    }    \n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n```\n\n------\n\n### 6.寻找完全数\n\n**【问题描述】**\n\n完全数是特殊的自然数。它所有的真约数（即除了自身以外的约数）的和，恰好等于它本身。 第一个完全数是6，它有约数1、2、3、6，除去它本身6外，其余3个数相加，1+2+3=6 第二个完全数是28，它有约数1、2、4、7、14、28，除去它本身28外，其余5个数相加，1+2+4+7+14=28。 输入一个整数m，输出区间[1,m]内最大的完全数。\n\n**【输入形式】**\n\n输入一个整数。\n\n**【输出形式】**\n\n输出不超过m的最大完全数。\n\n**【样例输入】**\n\n32\n\n**【样例输出】**\n\n28\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\tlong long int m;\n\tlong long int n=0,s=1;\n\tlong long int i=1,j=2;\n\tlong long int c;\n\tscanf(\"%ld\",&m);\n\t\n\tfor(i=m;i>=1;i--)\n\t{\n\t\tfor(j=2;j<=i;j++)\n\t\t{ \n\t\t\ts = i/j;\n\t\t\tif(i%j==0)\n\t\t\tn = n+s;\n\t\t}\n\t\tif(n==i)\n\t\t{\n\t\t\tc = i;\n\t\t\tbreak;\n\t\t}\n\t\tn = 0;\n\t\t\n\t}\n\tprintf(\"%ld\\n\",c);\n\treturn 0;\n}\n```\n\n------\n\n### 7.回文字符串\n\n\n\n**【问题描述】**\n\n回文字符串是具有回文特性的字符串：即该字符串从左向右读和从右向左读都一样，单独的字母不作为回文字符串，例如abcddcba即为一个长度为8的回文字符串。 编写一个程序，输入一个全是字母的字符串，找出字符串中最长的回文字符串，输出最长回文字符串的长度和最长的回文字符串（长度相同的输出第一个），若无回文字符串，只输出0。\n\n**【输入形式】**\n\n输入第一行为只含字母的字符串，长度不超过10000字符。 \n\n**【输出形式】**\n\n 输出结果第一行为最长回文字符串的长度输出结果第二行为最长的回文字符串\n\n**【样例输入1】**\n\n`abcdef`\n\n**【样例输出1】**\n\n`0`\n\n**【样例输入2】**\n\n`abcba`\n\n**【样例输出2】**\n\n`5 abcba`\n\n**【样例输入3】**\n\n`aAabccbaABcdcBA\n\n**【样例输出3】**\n\n`8 AabccbaA`\n\n\n\n```c\n#include<stdio.h>\n#include<string.h>\n#define LEN 100\n/*\n\"最大回文子串是指个字行串中长度最大的回文字符串,其基本算法思想如下：\n1、每个回文都有一个\"中心\"，当回文字符数为奇数时，中间的那个字符就是\n回文中心，但是当回文的字数为偶数时,回文的中心是最中间的那两个字符,\n且这两个字符相同。\n2.对任一个字符或者相同的两个连续字符,我们都可以假设它为回文的\"中心\"，\n向它的左右两边扩展出尽可能长的回文,对于每种假设,我们都能得到一个回文,\n而最长回文必定由其中的某个假设中得到!*/\n\n\nint Maxhw(char s[]) {\n\tint i,j,k,maxlen;\n\tint start=0;\n\tint slen=strlen(s);\n\tif(slen<1) return 0;\n\tmaxlen=0;\n\tfor(i=0;i<slen;i++) \n\t{\n    \tfor(j=0;(i-j>=0)&&(i+j<slen);j++)// 如果以i为中心是奇数的回文子串\n\t\t{\n\t\t\tif(s[i-j]!=s[i+j]) break;\n\t\t\tif(j*2+1>maxlen) \n\t\t\t{\n\t\t\t\tstart=i-j;\n\t\t\t\tmaxlen=j*2+1;\n\t\t\t}\n\t\t}\n\t\tfor(j=0;(i-j>=0)&&(i+j+1<slen);j++) // 如果以i为中心是偶数的回文子串\n\t\t{\n\t\t\tif(s[i-j]!=s[i+j+1]) break;\n\t\t\tif(j*2+2>maxlen) \n\t\t\t{\n\t\t\t\tstart=i-j;\n\t\t\t\tmaxlen=j*2+2;\n\t\t\t}\n\t\t}\n\t}\n\tfor (k=start;k<start+maxlen;k++) //输出最长回文串 \n\t\tprintf(\"%c\",s[k]);\n\tprintf(\"\\n\");\n\treturn maxlen; //返回最长回文串的长度 \n}\n\nint main()\n{\n\tchar ch[]=\"aAabccbaABcdcBA\";\n\t//char ch[LEN];\n\t//gets(ch); \n\tprintf(\"%d\\n\",Maxhw(ch));\n}\n```\n\n\n\n### 8.三种方法求Fabonacci数列\n\n**本题要求实现求Fabonacci数列项的函数。**\n\nFabonacci数列的定义如下：*f*(*n*)=*f*(*n*−2)+*f*(*n*−1) (*n*≥2)，其中*f*(0)=0，*f*(1)=1。\n\n**函数接口定义**：`int f( int n );`\n\n函数`f`应返回第`n`个Fabonacci数。题目保证输入输出在长整型范围内。建议用递归实现。 \n\n\n\n```c\n//递归\n\n#include <stdio.h>\n\nint fib(int n)\n{\n\tif(n==1||n==2) \n\t\treturn 1;\n\telse\n\t\treturn fib(n-1)+fib(n-2);\n } \n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\",fib(n));\n}\n\n```\n\n\n\n```c\n//递推\n\n#include <stdio.h>\n\nint main()\n{\n    int i,n,a=1,b=1;\n    scanf(\"%d\",&n);\n    for (i=3;i<=(n+1)/2+1;i++) //递推求相应项的值 \n\t{    \n\t    \ta=a+b;\n\t\t\tb=b+a;\n\t}\n\tif(n%2==1)\n\t\tprintf(\"%d \",a);\n\telse\n\t   \tprintf(\"%d\",b);\t\n}\n```\n\n\n\n\n\n```c\n//数组方法\n\n#include <stdio.h>\nint main()\n{\n    int i,n,m;\n    scanf(\"%d\",&n);\n    int fib[n];\n    fib[0]=1;fib[1]=1;\n    for(i=2;i<n;i++)\n    {\n        fib[i]=fib[i-1]+fib[i-2];\n        \n    }\n    printf(\"%d\",fib[n-1]);\n}\n```\n\n\n\n------\n\n\n\n### 9.相亲数\n\n**【问题描述】**\n\n2500年前数学大师毕达哥拉斯就发现，220和284两数之间存在着奇妙的联系： 220的因数之和（除了自身之外的因数）为：110+55+44+22+20+11+10+5+4+2+1=284，284的因数之和为：142+71+4+2+1=220。 毕达哥拉斯把这样的数对称为相亲数。输入两个正整数（大于1并且在int的表示范围之内），分别计算它们所有因数之和（除了自身之外的因数），并判断它们是否是一对相亲数。\n\n**【输入形式】**\n\n从标准输入输入两个正整数，以一个空格分隔这两个正整数。\n\n**【输出形式】**\n\n以输入的先后顺序分行输出：输入的正整数，后跟英文逗号&ldquo;,&rdquo;，再从除自身之外的最大的因数开始输出其因数相加的公式（最小的因数1之后没有加号），最后输出英文等号&ldquo;=&rdquo;和因数之和。注意：所有输出元素间无空格。 若它们是一对相亲数，则在新的一行上输出1；若不是则在新的一行上输出0。\n\n**【样例输入1】**\n\n220 284\n\n**【样例输出1】**\n\n220,110+55+44+22+20+11+10+5+4+2+1=284 284,142+71+4+2+1=220 1\n\n**【样例输入2】**\n\n2560 3282\n\n**【样例输出2】**\n\n2560,1280+640+512+320+256+160+128+80+64+40+32+20+16+10+8+5+4+2+1=3578 3282,1641+1094+547+6+3+2+1=3294 0\n\n**【样例说明】**\n\n样例1中输入的两个正整数为220和284，220的因数之和为284，284的因数之和为220，所以它们是一对相亲数，最后输出1； 例2中输入的两个正整数是2560和3282，2560的因数之和为3578，3282的因数之和为3294，所以它们不是一对相亲数，最后输出0。\n\n\n\n```c\n#include<stdio.h>\nint p(int x)\n{\n\tint i,n=0;\n\tprintf(\"%d,\",x);\n\tfor(i=x-1;i>=1;i--)\n    {\n        if(x%i==0) \n\t\t{\n\t\t\tprintf(\"%d\",i);\n\t\t\tn=n+i;\n\t\t\tif(i==1)\n\t\t\t\tprintf(\"=\");\n\t\t\telse\n\t \t\t\tprintf(\"+\");\t\n\t\t}\n\t}\t\t\n   \tprintf(\"%d\\n\",n);\n   \treturn n;\n     \n}\nint main()\n{\n\tint a,b,v;\n\tscanf(\"%d %d\",&a,&b);\n\tv=p(a);\n\tp(b);\n\tif(v==b)\n\t\tprintf(\"1\");\n\telse\n\t\tprintf(\"0\");\n\t\n}\n```\n\n------\n\n### 10.计算天数\n\n**【问题描述】**\n\n定义一个结构体变量用以记录一个日期（包括年，月，日）。输入一个日期，计算该日是本年的第几天。 \n\n**【输入形式】**\n\n输入日期（包括年 月 日），是三个整数，以空格分隔。 \n\n**【输出形式】**\n\n输出该日是本年的第多少天。\n\n **【样例输入】**\n\n 2003 3 25 \n\n**【样例输出】**\n\n 84 \n\n**【样例说明】**\n\n输入一个日期，输出该日是本年的第几天。 \n\n\n\n```c\n#include<stdio.h>\nint Y(int year)\n{\t\n\tint g;\n\tif(year%400==0)\n        g=1;\n    else\n    {\n        if(year%4==0&&year%100!=0)\n        \tg=1;\n        else\n        \tg=0;\n    }\n    if(g==1)\n    {\n       return 1;\n\t}\n    else\n    {\n       return 2;\n    }\n}\n\nint main()\n{\n\tint a,b,c,sum;\n\tint i,k=0,n=0;\n\tscanf(\"%d %d %d\",&a,&b,&c);\n\tif(Y(a)==1&&b>2)\n\t{\n\t\tfor(i=b-1;i>=1;i--)\n\t\t{\n\t\t\tif(i%2==0)\n\t\t\t\tn++;\n\t\t\telse\n\t\t\t\tk++;\n\t\t}\n\t\tsum=31*k+30*n+c-1;\n\t\tprintf(\"%d\",sum);\n\t}\n\tif(Y(a)==2&&b>2)\n\t{\n\t\t\tfor(i=b-1;i>=1;i--)\n\t\t{\n\t\t\tif(i%2==0)\n\t\t\t\tn++;\n\t\t\telse\n\t\t\t\tk++;\n\t\t}\n\t\tsum=31*k+30*n+c-2;\n\t\tprintf(\"%d\",sum);\n\t}\n\tif(b<=2)\n\t{\n\t\t\tfor(i=b-1;i>=1;i--)\n\t\t{\n\t\t\tif(i%2==0)\n\t\t\t\tn++;\n\t\t\telse\n\t\t\t\tk++;\n\t\t}\n\t\tsum=31*k+30*n+c;\n\t\tprintf(\"%d\",sum);\n\t}\n}\n\n```\n\n\n\n------\n\n### 11.求最大公因子\n\n**【问题描述】**\n\n用递归方法编写求最大公因子程序。两个正整数x和y的最大公因子定义为：如果y<=x且x mod y＝0时，gcd(x,y)=y;如果y>x时，gcd(x,y)=gcd(y,x);其他情况，gcd(x,y)=gcd(y,x mod y) \n\n**【输入形式】**\n\n用户在第一行输入两个数字，数字之间用空格分割。\n\n **【输出形式】**\n\n程序在下一行输出前面输入的两个数字的最大公因子。 \n\n**【样例输入】**\n\n36 24 \n\n**【样例输出】**\n\n12 \n\n**【样例说明】**\n\n用户输入36，24，程序输出它们的最大公因子12 \n\n\n\n```c\n#include<stdio.h>\nint f(int x,int y)\n{\n\tif(x%y==0) \n\t\treturn y;\n     else \n\t \tf(y,x%y);  \n}\nint main()\n{\n\tint a,b;\n\tscanf(\"%d %d\",&a,&b);\n\tprintf(\"%d\",f(a,b));\n}\n\n```\n\n\n\n### 12.整数合并\n\n**【问题描述】** \n\n编写一函数int comb(int a,int b)，将两个两位数的正整数a、b合并形成一个整数并返回。合并的方式是：将a的十位和个位数依次放在结果的十位和千位上， b的十位和个位数依次放在结果的个位和百位上。例如，当a＝45，b=12。调用该函数后，返回5241。要求在main函数中调用该函数进行验证：从键盘输入两个整数，然后调用该函数进行合并，并输出合并后的结果。 \n\n**【输入形式】**\n\n 输入两个两位数的正整数，以空格隔开。\n\n**【输出形式】**\n\n输出合并后的正整数。 \n\n**【输入样例】** \n\n45 12 \n\n**【输出样例】**\n\n 5241\n\n\n\n```c\n#include<stdio.h>\nint main()\n{\n\tint a,b;\n\tint sum,c,d,e,f;\n\tscanf(\"%d %d\",&a,&b);\n\tc=(a%10)*1000;\n\ta=a/10;\n\td=(a%10)*10;\n\n\te=(b%10)*100;\n\tb=b/10;\n\tf=(b%10);\n\tsum=c+d+e+f;\n\tprintf(\"%d\",sum);\n}\n\n```\n\n\n\n\n\n暂时就更新到这里吧","slug":"C语言编程题目整合","published":true,"updated":"2020-04-26T14:44:31.157Z","_id":"clq6dy48i000kikw088mtkeaj","comments":true,"layout":"post","photos":[],"link":"","html":"<p><strong>做过的题目渐渐变得生疏，索性记录在博客上，看着更直观些，好记性不如烂笔头！</strong></p>\n<hr>\n<h3 id=\"1-数值变换\"><a href=\"#1-数值变换\" class=\"headerlink\" title=\"1.数值变换\"></a>1.数值变换</h3><p><strong>【问题描述】</strong></p>\n<p> 编写一程序，从键盘输入输入一个三位正整数，然后反向输出对应的数，如果输入的数不是三位正整数，则输出－1。 </p>\n<p><strong>【输入形式】</strong> </p>\n<p>从键盘输入三位的正整数。 </p>\n<p><strong>【输出形式】</strong></p>\n<p> 输出交换后的正整数值。 </p>\n<p><strong>【输入样例】</strong></p>\n<p> 356  </p>\n<p><strong>【输出样例】</strong></p>\n<p> 653 </p>\n<p><strong>【样例说明】</strong></p>\n<p>从键盘输入的正整数值为356，将该数的个位与百位互换，所得结果为653.如果输入的正整数为300，则输出为3。 </p>\n<p><strong>【评分标准】</strong> </p>\n<p>结果完全正确得20分，每个测试点4分。</p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">>=</span><span class=\"token number\">100</span><span class=\"token operator\">&amp;&amp;</span>a<span class=\"token operator\">&lt;</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        b<span class=\"token operator\">=</span>a<span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>    \n        c<span class=\"token operator\">=</span>a<span class=\"token operator\">%</span><span class=\"token number\">100</span><span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        d<span class=\"token operator\">=</span>a<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d%d\"</span><span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"2-sinx计算公式\"><a href=\"#2-sinx计算公式\" class=\"headerlink\" title=\"2.sinx计算公式\"></a>2.sinx计算公式</h3><p><strong>【问题描述】</strong></p>\n<p>已知sinx的近似计算公式如下： sin x = x - x3/3! + x5/5! - x7/7! + … + (-1)n-1x2n-1/(2n-1)! 其中x为弧度，n为正整数。编写程序根据用户输入的x和n的值，利用上述近似计算公式计算sinx的近似值，要求输出结果小数点后保留8位。</p>\n<p><strong>【输入形式】</strong></p>\n<p>从控制台输入小数x（0&lt;=x&lt;=20）和整数n（1&lt;=n&lt;=5000），两数中间用空格分隔。</p>\n<p><strong>【输出形式】</strong></p>\n<p>控制台输出公式结果：小数点后保留8位。</p>\n<p><strong>【样例输入1】</strong></p>\n<p>0.5236 4</p>\n<p><strong>【样例输出1】</strong></p>\n<p>0.50000105</p>\n<p><strong>【样例输入2】</strong></p>\n<p>0.5236 50</p>\n<p><strong>【样例输出2】</strong></p>\n<p>0.50000106</p>\n<p><strong>【样例说明】</strong></p>\n<p>输入x为0.5236，n为4，求得sinx近似计算公式的值为0.50000105，小数点后保留8位；同样，输入x为0.5236，n为50，求得sinx近似计算公式的值为0.50000106，小数点后保留8位。注意：为保证数据的准确性和一致性，<strong>请使用double数据类型保存计算结果。</strong></p>\n<p><strong>【评分标准】</strong></p>\n<p>该题要求输出上述公式的计算结果，共有5个测试点</p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token macro property\"># <span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"># <span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;math.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> p<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//p是阶乘中的变量，总量即分母是f </span>\n    <span class=\"token keyword\">double</span> s<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>t<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf %lf\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    f<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>    p<span class=\"token operator\">=</span>p<span class=\"token operator\">*</span>i<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n           s<span class=\"token operator\">=</span>s<span class=\"token operator\">+</span>t<span class=\"token operator\">*</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>p<span class=\"token punctuation\">;</span>\n           t<span class=\"token operator\">=</span><span class=\"token operator\">-</span>t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.8lf\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"3-个人所得税\"><a href=\"#3-个人所得税\" class=\"headerlink\" title=\"3.个人所得税\"></a>3.个人所得税</h3><p><strong>【问题描述】</strong>2019年1月1月新修订的个税法正式实施，个人所得税由之前的3500元提高到了5000元，还可以减去6项专项附加扣除，主要有子女教育、继续教育、赡养老人、大病医疗、住房贷款利息和住房租金，扣除三险一金和专项附加，工资大于5000元需要缴纳个人所得税，若小于5000元则不需要缴纳。2019年5000起征点个税表如下：</p>\n<p><img src=\"http://jsjjs.ctbu.edu.cn/userfiles/image/2019/15706296140540202339.jpg\" alt=\"1-1P91H2561V43.jpg\"></p>\n<p>假设6项专项附加扣除为零。</p>\n<p>请根据税率表编写代码，输入月收入和扣除的三险一金（单位：元），输出待交的个人所得税。</p>\n<p><strong>注：个税的计算方法</strong></p>\n<p>比如张先生在武汉工作每个月工资为10000元，公司每个月缴纳社保公积金扣除1300元，没有专项附加扣除费。那么张先生到手的工资为10000-1300-0=8700元，达到了个税起征点5000元，超出的部分按照10%的个人所得税率来计算，(8700-5000)*10%-210=160元，那么张先生一个月需要缴纳的个人所得税为160元。</p>\n<p><strong>【输入形式】</strong>用户在第一行输入月收入和三险一金(单位：元），中间用空格分开，第一个数是月收入，第二个数是三险一金<br><strong>【输出形式】</strong>用户待交的个人所得税（单位：元），保留两位小数<br><strong>【样例输入】</strong>10000 1300<br><strong>【样例输出】</strong>160.00<br><strong>【样例说明】</strong>输入的两个数中，第一个表示月收入，第二个数表示扣除的三险一金;输出待交的个人所得税<br><strong>【评分标准】</strong>完全正确20分。提交源文件名为tax.c</p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> m<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span>tax<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> rate<span class=\"token punctuation\">,</span>late<span class=\"token punctuation\">;</span> \n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf%lf\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">=</span>l<span class=\"token operator\">-</span>p<span class=\"token number\">-5000</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        tax<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">&lt;=</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>    \n            t<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">&lt;=</span><span class=\"token number\">12000</span><span class=\"token punctuation\">)</span>\n            t<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">&lt;=</span><span class=\"token number\">25000</span><span class=\"token punctuation\">)</span>\n            t<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">&lt;=</span><span class=\"token number\">35000</span><span class=\"token punctuation\">)</span>\n            t<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">&lt;=</span><span class=\"token number\">55000</span><span class=\"token punctuation\">)</span>\n            t<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">&lt;=</span><span class=\"token number\">80000</span><span class=\"token punctuation\">)</span>\n            t<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> \n            t<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                rate<span class=\"token operator\">=</span><span class=\"token number\">0.03</span><span class=\"token punctuation\">,</span>late<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                rate<span class=\"token operator\">=</span><span class=\"token number\">0.10</span><span class=\"token punctuation\">,</span>late<span class=\"token operator\">=</span><span class=\"token number\">210</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n                rate<span class=\"token operator\">=</span><span class=\"token number\">0.20</span><span class=\"token punctuation\">,</span>late<span class=\"token operator\">=</span><span class=\"token number\">1410</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>\n                rate<span class=\"token operator\">=</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span>late<span class=\"token operator\">=</span><span class=\"token number\">2660</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n                rate<span class=\"token operator\">=</span><span class=\"token number\">0.30</span><span class=\"token punctuation\">,</span>late<span class=\"token operator\">=</span><span class=\"token number\">4410</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span>\n                rate<span class=\"token operator\">=</span><span class=\"token number\">0.35</span><span class=\"token punctuation\">,</span>late<span class=\"token operator\">=</span><span class=\"token number\">7160</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span>\n                rate<span class=\"token operator\">=</span><span class=\"token number\">0.45</span><span class=\"token punctuation\">,</span>late<span class=\"token operator\">=</span><span class=\"token number\">15160</span><span class=\"token punctuation\">;</span>        \n        <span class=\"token punctuation\">}</span>\n        tax<span class=\"token operator\">=</span>m<span class=\"token operator\">*</span>rate<span class=\"token operator\">-</span>late<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"需要缴纳的个人所得税为:%.2f 元\"</span><span class=\"token punctuation\">,</span>tax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"4-字符串复制\"><a href=\"#4-字符串复制\" class=\"headerlink\" title=\"4.字符串复制\"></a>4.字符串复制</h3><p><strong>【问题描述】</strong></p>\n<p>编写一个字符串复制函数strCopy()，将字符串1中奇数位置的字符复制到另一个字符串2中，在主函数中调用函数strCopy()并输出复制后的结果。例如，当字符串1为”This is a C program”，则字符串2为”Ti saCporm”。</p>\n<p><strong>【输入形式】</strong></p>\n<p>输入字符串 </p>\n<p><strong>【输出形式】</strong></p>\n<p>输出复制后的字符串 </p>\n<p><strong>【样例输入】</strong></p>\n<p>This is a C Program </p>\n<p><strong>【样例输出】</strong></p>\n<p>Ti saCporm </p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strCopy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strCopy</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"5-还是三角形\"><a href=\"#5-还是三角形\" class=\"headerlink\" title=\"5.还是三角形\"></a>5.还是三角形</h3><p><strong>【问题描述】</strong></p>\n<p>给定三条边，请判断三角形的类型。</p>\n<p><strong>【输入形式】</strong></p>\n<p>输入数据包含3个整数，表示三条边的长度，数据保证三条边一定能够组成三角形。</p>\n<p><strong>【输出形式】</strong></p>\n<p>请判断三条边组成的三角形类型（锐角三角形、钝角三角形、直角三角形、等腰三角形、等边三角形）。如果数据符合多种类型，则只输出优先度最高的类型（上面的五种三角形，优先级从低到高），具体输出格式参见样例。</p>\n<p><strong>【样例输入】</strong></p>\n<p>3 3 3</p>\n<p><strong>【样例输出】</strong></p>\n<p> 等边三角形</p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h></span> </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">;</span>    \n    t<span class=\"token operator\">=</span>a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span>a<span class=\"token punctuation\">:</span>b<span class=\"token punctuation\">;</span>   \n    max<span class=\"token operator\">=</span>t<span class=\"token operator\">></span>c<span class=\"token operator\">?</span>t<span class=\"token punctuation\">:</span>c<span class=\"token punctuation\">;</span>   \n    <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span>min<span class=\"token punctuation\">;</span> \n    t<span class=\"token operator\">=</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token operator\">?</span>a<span class=\"token punctuation\">:</span>b<span class=\"token punctuation\">;</span> \n    min<span class=\"token operator\">=</span>t<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">?</span>t<span class=\"token punctuation\">:</span>c<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">return</span> min<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>   \n    <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">;</span>    \n    mid<span class=\"token operator\">=</span>a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">?</span>a<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">></span>c<span class=\"token operator\">?</span>b<span class=\"token punctuation\">:</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">?</span>b<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>c<span class=\"token operator\">?</span>a<span class=\"token punctuation\">:</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">;</span>             \n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">></span>c<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>           \n    <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//  满足上面条件的三边可以构成三角形             </span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span>b<span class=\"token operator\">&amp;&amp;</span>b<span class=\"token operator\">==</span>c<span class=\"token punctuation\">)</span>                \n             <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等边三角形\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              \n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">!=</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">==</span>c<span class=\"token operator\">&amp;</span>a<span class=\"token operator\">!=</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span>c<span class=\"token operator\">&amp;&amp;</span>b<span class=\"token operator\">!=</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>           \n                 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等腰三角形\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n             <span class=\"token keyword\">else</span>                 \n            <span class=\"token punctuation\">{</span>                    \n                x<span class=\"token operator\">=</span><span class=\"token function\">Min</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         \n                y<span class=\"token operator\">=</span><span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      \n                z<span class=\"token operator\">=</span><span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x<span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>y<span class=\"token operator\">></span>z<span class=\"token operator\">*</span>z<span class=\"token punctuation\">)</span>                           \n                      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"锐角三角形\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                        \n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">*</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">*</span>b<span class=\"token operator\">==</span>c<span class=\"token operator\">*</span>c<span class=\"token punctuation\">)</span>                            \n                      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"直角三角形\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                        \n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x<span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>y<span class=\"token operator\">&lt;</span>z<span class=\"token operator\">*</span>z<span class=\"token punctuation\">)</span>                            \n                      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"钝角三角形\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   \n            <span class=\"token punctuation\">}</span>           \n    <span class=\"token punctuation\">}</span>       \n    <span class=\"token keyword\">else</span><span class=\"token comment\" spellcheck=\"true\">//不满足构成三角形的条件           </span>\n    <span class=\"token punctuation\">{</span>                \n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这三边不能构成三角形\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>    \n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"6-寻找完全数\"><a href=\"#6-寻找完全数\" class=\"headerlink\" title=\"6.寻找完全数\"></a>6.寻找完全数</h3><p><strong>【问题描述】</strong></p>\n<p>完全数是特殊的自然数。它所有的真约数（即除了自身以外的约数）的和，恰好等于它本身。 第一个完全数是6，它有约数1、2、3、6，除去它本身6外，其余3个数相加，1+2+3=6 第二个完全数是28，它有约数1、2、4、7、14、28，除去它本身28外，其余5个数相加，1+2+4+7+14=28。 输入一个整数m，输出区间[1,m]内最大的完全数。</p>\n<p><strong>【输入形式】</strong></p>\n<p>输入一个整数。</p>\n<p><strong>【输出形式】</strong></p>\n<p>输出不超过m的最大完全数。</p>\n<p><strong>【样例输入】</strong></p>\n<p>32</p>\n<p><strong>【样例输出】</strong></p>\n<p>28</p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>s<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span> \n            s <span class=\"token operator\">=</span> i<span class=\"token operator\">/</span>j<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span>j<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            n <span class=\"token operator\">=</span> n<span class=\"token operator\">+</span>s<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            c <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\\n\"</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"7-回文字符串\"><a href=\"#7-回文字符串\" class=\"headerlink\" title=\"7.回文字符串\"></a>7.回文字符串</h3><p><strong>【问题描述】</strong></p>\n<p>回文字符串是具有回文特性的字符串：即该字符串从左向右读和从右向左读都一样，单独的字母不作为回文字符串，例如abcddcba即为一个长度为8的回文字符串。 编写一个程序，输入一个全是字母的字符串，找出字符串中最长的回文字符串，输出最长回文字符串的长度和最长的回文字符串（长度相同的输出第一个），若无回文字符串，只输出0。</p>\n<p><strong>【输入形式】</strong></p>\n<p>输入第一行为只含字母的字符串，长度不超过10000字符。 </p>\n<p><strong>【输出形式】</strong></p>\n<p> 输出结果第一行为最长回文字符串的长度输出结果第二行为最长的回文字符串</p>\n<p><strong>【样例输入1】</strong></p>\n<p><code>abcdef</code></p>\n<p><strong>【样例输出1】</strong></p>\n<p><code>0</code></p>\n<p><strong>【样例输入2】</strong></p>\n<p><code>abcba</code></p>\n<p><strong>【样例输出2】</strong></p>\n<p><code>5 abcba</code></p>\n<p><strong>【样例输入3】</strong></p>\n<p>`aAabccbaABcdcBA</p>\n<p><strong>【样例输出3】</strong></p>\n<p><code>8 AabccbaA</code></p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> LEN 100</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\n\"最大回文子串是指个字行串中长度最大的回文字符串,其基本算法思想如下：\n1、每个回文都有一个\"中心\"，当回文字符数为奇数时，中间的那个字符就是\n回文中心，但是当回文的字数为偶数时,回文的中心是最中间的那两个字符,\n且这两个字符相同。\n2.对任一个字符或者相同的两个连续字符,我们都可以假设它为回文的\"中心\"，\n向它的左右两边扩展出尽可能长的回文,对于每种假设,我们都能得到一个回文,\n而最长回文必定由其中的某个假设中得到!*/</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Maxhw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>maxlen<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> start<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> slen<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>slen<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    maxlen<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>slen<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>j<span class=\"token operator\">&lt;</span>slen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">// 如果以i为中心是奇数的回文子串</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">></span>maxlen<span class=\"token punctuation\">)</span> \n            <span class=\"token punctuation\">{</span>\n                start<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">;</span>\n                maxlen<span class=\"token operator\">=</span>j<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span>slen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 如果以i为中心是偶数的回文子串</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">></span>maxlen<span class=\"token punctuation\">)</span> \n            <span class=\"token punctuation\">{</span>\n                start<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">;</span>\n                maxlen<span class=\"token operator\">=</span>j<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">=</span>start<span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>start<span class=\"token operator\">+</span>maxlen<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//输出最长回文串 </span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> maxlen<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//返回最长回文串的长度 </span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"aAabccbaABcdcBA\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//char ch[LEN];</span>\n    <span class=\"token comment\" spellcheck=\"true\">//gets(ch); </span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">Maxhw</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"8-三种方法求Fabonacci数列\"><a href=\"#8-三种方法求Fabonacci数列\" class=\"headerlink\" title=\"8.三种方法求Fabonacci数列\"></a>8.三种方法求Fabonacci数列</h3><p><strong>本题要求实现求Fabonacci数列项的函数。</strong></p>\n<p>Fabonacci数列的定义如下：<em>f</em>(<em>n</em>)=<em>f</em>(<em>n</em>−2)+<em>f</em>(<em>n</em>−1) (<em>n</em>≥2)，其中<em>f</em>(0)=0，<em>f</em>(1)=1。</p>\n<p><strong>函数接口定义</strong>：<code>int f( int n );</code></p>\n<p>函数<code>f</code>应返回第<code>n</code>个Fabonacci数。题目保证输入输出在长整型范围内。建议用递归实现。 </p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">//递归</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>n<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token number\">-2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">//递推</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//递推求相应项的值 </span>\n    <span class=\"token punctuation\">{</span>    \n            a<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n            b<span class=\"token operator\">=</span>b<span class=\"token operator\">+</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n           <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">//数组方法</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> fib<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    fib<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>fib<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        fib<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>fib<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>fib<span class=\"token punctuation\">[</span>i<span class=\"token number\">-2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>fib<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"9-相亲数\"><a href=\"#9-相亲数\" class=\"headerlink\" title=\"9.相亲数\"></a>9.相亲数</h3><p><strong>【问题描述】</strong></p>\n<p>2500年前数学大师毕达哥拉斯就发现，220和284两数之间存在着奇妙的联系： 220的因数之和（除了自身之外的因数）为：110+55+44+22+20+11+10+5+4+2+1=284，284的因数之和为：142+71+4+2+1=220。 毕达哥拉斯把这样的数对称为相亲数。输入两个正整数（大于1并且在int的表示范围之内），分别计算它们所有因数之和（除了自身之外的因数），并判断它们是否是一对相亲数。</p>\n<p><strong>【输入形式】</strong></p>\n<p>从标准输入输入两个正整数，以一个空格分隔这两个正整数。</p>\n<p><strong>【输出形式】</strong></p>\n<p>以输入的先后顺序分行输出：输入的正整数，后跟英文逗号&ldquo;,&rdquo;，再从除自身之外的最大的因数开始输出其因数相加的公式（最小的因数1之后没有加号），最后输出英文等号&ldquo;=&rdquo;和因数之和。注意：所有输出元素间无空格。 若它们是一对相亲数，则在新的一行上输出1；若不是则在新的一行上输出0。</p>\n<p><strong>【样例输入1】</strong></p>\n<p>220 284</p>\n<p><strong>【样例输出1】</strong></p>\n<p>220,110+55+44+22+20+11+10+5+4+2+1=284 284,142+71+4+2+1=220 1</p>\n<p><strong>【样例输入2】</strong></p>\n<p>2560 3282</p>\n<p><strong>【样例输出2】</strong></p>\n<p>2560,1280+640+512+320+256+160+128+80+64+40+32+20+16+10+8+5+4+2+1=3578 3282,1641+1094+547+6+3+2+1=3294 0</p>\n<p><strong>【样例说明】</strong></p>\n<p>样例1中输入的两个正整数为220和284，220的因数之和为284，284的因数之和为220，所以它们是一对相亲数，最后输出1； 例2中输入的两个正整数是2560和3282，2560的因数之和为3578，3282的因数之和为3294，所以它们不是一对相亲数，最后输出0。</p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d,\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>x<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">%</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            n<span class=\"token operator\">=</span>n<span class=\"token operator\">+</span>i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>        \n       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v<span class=\"token operator\">=</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">==</span>b<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"10-计算天数\"><a href=\"#10-计算天数\" class=\"headerlink\" title=\"10.计算天数\"></a>10.计算天数</h3><p><strong>【问题描述】</strong></p>\n<p>定义一个结构体变量用以记录一个日期（包括年，月，日）。输入一个日期，计算该日是本年的第几天。 </p>\n<p><strong>【输入形式】</strong></p>\n<p>输入日期（包括年 月 日），是三个整数，以空格分隔。 </p>\n<p><strong>【输出形式】</strong></p>\n<p>输出该日是本年的第多少天。</p>\n<p> <strong>【样例输入】</strong></p>\n<p> 2003 3 25 </p>\n<p><strong>【样例输出】</strong></p>\n<p> 84 </p>\n<p><strong>【样例说明】</strong></p>\n<p>输入一个日期，输出该日是本年的第几天。 </p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Y</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">int</span> g<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>year<span class=\"token operator\">%</span><span class=\"token number\">400</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        g<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>year<span class=\"token operator\">%</span><span class=\"token number\">4</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>year<span class=\"token operator\">%</span><span class=\"token number\">100</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            g<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            g<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">Y</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>b<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>b<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        sum<span class=\"token operator\">=</span><span class=\"token number\">31</span><span class=\"token operator\">*</span>k<span class=\"token operator\">+</span><span class=\"token number\">30</span><span class=\"token operator\">*</span>n<span class=\"token operator\">+</span>c<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">Y</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token operator\">&amp;&amp;</span>b<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>b<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        sum<span class=\"token operator\">=</span><span class=\"token number\">31</span><span class=\"token operator\">*</span>k<span class=\"token operator\">+</span><span class=\"token number\">30</span><span class=\"token operator\">*</span>n<span class=\"token operator\">+</span>c<span class=\"token number\">-2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">&lt;=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>b<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        sum<span class=\"token operator\">=</span><span class=\"token number\">31</span><span class=\"token operator\">*</span>k<span class=\"token operator\">+</span><span class=\"token number\">30</span><span class=\"token operator\">*</span>n<span class=\"token operator\">+</span>c<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"11-求最大公因子\"><a href=\"#11-求最大公因子\" class=\"headerlink\" title=\"11.求最大公因子\"></a>11.求最大公因子</h3><p><strong>【问题描述】</strong></p>\n<p>用递归方法编写求最大公因子程序。两个正整数x和y的最大公因子定义为：如果y&lt;=x且x mod y＝0时，gcd(x,y)=y;如果y&gt;x时，gcd(x,y)=gcd(y,x);其他情况，gcd(x,y)=gcd(y,x mod y) </p>\n<p><strong>【输入形式】</strong></p>\n<p>用户在第一行输入两个数字，数字之间用空格分割。</p>\n<p> <strong>【输出形式】</strong></p>\n<p>程序在下一行输出前面输入的两个数字的最大公因子。 </p>\n<p><strong>【样例输入】</strong></p>\n<p>36 24 </p>\n<p><strong>【样例输出】</strong></p>\n<p>12 </p>\n<p><strong>【样例说明】</strong></p>\n<p>用户输入36，24，程序输出它们的最大公因子12 </p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">%</span>y<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span> \n         <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>x<span class=\"token operator\">%</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"12-整数合并\"><a href=\"#12-整数合并\" class=\"headerlink\" title=\"12.整数合并\"></a>12.整数合并</h3><p><strong>【问题描述】</strong> </p>\n<p>编写一函数int comb(int a,int b)，将两个两位数的正整数a、b合并形成一个整数并返回。合并的方式是：将a的十位和个位数依次放在结果的十位和千位上， b的十位和个位数依次放在结果的个位和百位上。例如，当a＝45，b=12。调用该函数后，返回5241。要求在main函数中调用该函数进行验证：从键盘输入两个整数，然后调用该函数进行合并，并输出合并后的结果。 </p>\n<p><strong>【输入形式】</strong></p>\n<p> 输入两个两位数的正整数，以空格隔开。</p>\n<p><strong>【输出形式】</strong></p>\n<p>输出合并后的正整数。 </p>\n<p><strong>【输入样例】</strong> </p>\n<p>45 12 </p>\n<p><strong>【输出样例】</strong></p>\n<p> 5241</p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token operator\">=</span>a<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    d<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n    e<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">=</span>b<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sum<span class=\"token operator\">=</span>c<span class=\"token operator\">+</span>d<span class=\"token operator\">+</span>e<span class=\"token operator\">+</span>f<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>暂时就更新到这里吧</p>\n","excerpt":"","more":"<p><strong>做过的题目渐渐变得生疏，索性记录在博客上，看着更直观些，好记性不如烂笔头！</strong></p>\n<hr>\n<h3 id=\"1-数值变换\"><a href=\"#1-数值变换\" class=\"headerlink\" title=\"1.数值变换\"></a>1.数值变换</h3><p><strong>【问题描述】</strong></p>\n<p> 编写一程序，从键盘输入输入一个三位正整数，然后反向输出对应的数，如果输入的数不是三位正整数，则输出－1。 </p>\n<p><strong>【输入形式】</strong> </p>\n<p>从键盘输入三位的正整数。 </p>\n<p><strong>【输出形式】</strong></p>\n<p> 输出交换后的正整数值。 </p>\n<p><strong>【输入样例】</strong></p>\n<p> 356  </p>\n<p><strong>【输出样例】</strong></p>\n<p> 653 </p>\n<p><strong>【样例说明】</strong></p>\n<p>从键盘输入的正整数值为356，将该数的个位与百位互换，所得结果为653.如果输入的正整数为300，则输出为3。 </p>\n<p><strong>【评分标准】</strong> </p>\n<p>结果完全正确得20分，每个测试点4分。</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\nint main()\n{\n    int a, b, c, d;\n    scanf(&quot;%d&quot;,&amp;a);\n    if(a&gt;=100&amp;&amp;a&lt;1000)\n    {\n        b=a/100;    \n        c=a%100/10;\n        d=a%10;\n        if(d==0&amp;&amp;c==0)\n            printf(&quot;%d&quot;,b);\n        else if(d==0)\n            printf(&quot;%d%d&quot;,c,b);\n        else\n            printf(&quot;%d%d%d&quot;,d,c,b);\n    }\n    else\n        printf(&quot;-1&quot;);\n} </code></pre>\n<hr>\n<h3 id=\"2-sinx计算公式\"><a href=\"#2-sinx计算公式\" class=\"headerlink\" title=\"2.sinx计算公式\"></a>2.sinx计算公式</h3><p><strong>【问题描述】</strong></p>\n<p>已知sinx的近似计算公式如下： sin x = x - x3/3! + x5/5! - x7/7! + … + (-1)n-1x2n-1/(2n-1)! 其中x为弧度，n为正整数。编写程序根据用户输入的x和n的值，利用上述近似计算公式计算sinx的近似值，要求输出结果小数点后保留8位。</p>\n<p><strong>【输入形式】</strong></p>\n<p>从控制台输入小数x（0&lt;=x&lt;=20）和整数n（1&lt;=n&lt;=5000），两数中间用空格分隔。</p>\n<p><strong>【输出形式】</strong></p>\n<p>控制台输出公式结果：小数点后保留8位。</p>\n<p><strong>【样例输入1】</strong></p>\n<p>0.5236 4</p>\n<p><strong>【样例输出1】</strong></p>\n<p>0.50000105</p>\n<p><strong>【样例输入2】</strong></p>\n<p>0.5236 50</p>\n<p><strong>【样例输出2】</strong></p>\n<p>0.50000106</p>\n<p><strong>【样例说明】</strong></p>\n<p>输入x为0.5236，n为4，求得sinx近似计算公式的值为0.50000105，小数点后保留8位；同样，输入x为0.5236，n为50，求得sinx近似计算公式的值为0.50000106，小数点后保留8位。注意：为保证数据的准确性和一致性，<strong>请使用double数据类型保存计算结果。</strong></p>\n<p><strong>【评分标准】</strong></p>\n<p>该题要求输出上述公式的计算结果，共有5个测试点</p>\n<pre><code class=\"c\"># include&lt;stdio.h&gt;\n# include&lt;math.h&gt;\n\nint main()\n{\n    double p=1.0,f,x;//p是阶乘中的变量，总量即分母是f \n    double s=0,t=-1;\n    double i,j,n;\n    scanf(&quot;%lf %lf&quot;,&amp;x,&amp;n);\n    s=x;\n    f=x;\n    for(i=3;i&lt;=2*n-1;i=i+2)\n    {    p=p*i*(i-1);\n\n           s=s+t*pow(x,i)/p;\n           t=-t;\n    } \n    printf(&quot;%.8lf&quot;,s);\n }</code></pre>\n<hr>\n<h3 id=\"3-个人所得税\"><a href=\"#3-个人所得税\" class=\"headerlink\" title=\"3.个人所得税\"></a>3.个人所得税</h3><p><strong>【问题描述】</strong>2019年1月1月新修订的个税法正式实施，个人所得税由之前的3500元提高到了5000元，还可以减去6项专项附加扣除，主要有子女教育、继续教育、赡养老人、大病医疗、住房贷款利息和住房租金，扣除三险一金和专项附加，工资大于5000元需要缴纳个人所得税，若小于5000元则不需要缴纳。2019年5000起征点个税表如下：</p>\n<p><img src=\"http://jsjjs.ctbu.edu.cn/userfiles/image/2019/15706296140540202339.jpg\" alt=\"1-1P91H2561V43.jpg\"></p>\n<p>假设6项专项附加扣除为零。</p>\n<p>请根据税率表编写代码，输入月收入和扣除的三险一金（单位：元），输出待交的个人所得税。</p>\n<p><strong>注：个税的计算方法</strong></p>\n<p>比如张先生在武汉工作每个月工资为10000元，公司每个月缴纳社保公积金扣除1300元，没有专项附加扣除费。那么张先生到手的工资为10000-1300-0=8700元，达到了个税起征点5000元，超出的部分按照10%的个人所得税率来计算，(8700-5000)*10%-210=160元，那么张先生一个月需要缴纳的个人所得税为160元。</p>\n<p><strong>【输入形式】</strong>用户在第一行输入月收入和三险一金(单位：元），中间用空格分开，第一个数是月收入，第二个数是三险一金<br><strong>【输出形式】</strong>用户待交的个人所得税（单位：元），保留两位小数<br><strong>【样例输入】</strong>10000 1300<br><strong>【样例输出】</strong>160.00<br><strong>【样例说明】</strong>输入的两个数中，第一个表示月收入，第二个数表示扣除的三险一金;输出待交的个人所得税<br><strong>【评分标准】</strong>完全正确20分。提交源文件名为tax.c</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\nint main()\n{\n    int t;\n    double m,l,p,tax;\n    double rate,late; \n    scanf(&quot;%lf%lf&quot;,&amp;l,&amp;p);\n    m=l-p-5000;\n\n    if(m&lt;=0)\n    {\n        tax=0;\n    }\n    else\n    {\n        if(m&lt;=3000)    \n            t=1;\n        else if(m&lt;=12000)\n            t=2;\n        else if(m&lt;=25000)\n            t=3;\n        else if(m&lt;=35000)\n            t=4;\n        else if(m&lt;=55000)\n            t=5;\n        else if(m&lt;=80000)\n            t=6;\n        else \n            t=7;\n\n        switch(t)\n        {\n            case 1:\n                rate=0.03,late=0;\n                break;\n            case 2:\n                rate=0.10,late=210;\n                break;\n            case 3:\n                rate=0.20,late=1410;\n                break;\n            case 4:\n                rate=0.25,late=2660;\n                break;\n            case 5:\n                rate=0.30,late=4410;\n                break;\n            case 6:\n                rate=0.35,late=7160;\n                break;\n            case 7:\n                rate=0.45,late=15160;        \n        }\n        tax=m*rate-late;\n    }\n    printf(&quot;需要缴纳的个人所得税为:%.2f 元&quot;,tax);\n    return 0;\n}</code></pre>\n<hr>\n<h3 id=\"4-字符串复制\"><a href=\"#4-字符串复制\" class=\"headerlink\" title=\"4.字符串复制\"></a>4.字符串复制</h3><p><strong>【问题描述】</strong></p>\n<p>编写一个字符串复制函数strCopy()，将字符串1中奇数位置的字符复制到另一个字符串2中，在主函数中调用函数strCopy()并输出复制后的结果。例如，当字符串1为”This is a C program”，则字符串2为”Ti saCporm”。</p>\n<p><strong>【输入形式】</strong></p>\n<p>输入字符串 </p>\n<p><strong>【输出形式】</strong></p>\n<p>输出复制后的字符串 </p>\n<p><strong>【样例输入】</strong></p>\n<p>This is a C Program </p>\n<p><strong>【样例输出】</strong></p>\n<p>Ti saCporm </p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nchar *strCopy(char a[20])\n{\n    static char b[20];\n    int j = 0;\n    for (int i = 0; i &lt; 20; i += 2, j++)\n    {\n        b[j]=a[i];\n    }\n    return b;\n}\n\nint main()\n{\n    char a[20];\n    char *p = &quot;&quot;;\n\n    gets(a);\n    printf(&quot;%s&quot;, strCopy(a));\n}</code></pre>\n<hr>\n<h3 id=\"5-还是三角形\"><a href=\"#5-还是三角形\" class=\"headerlink\" title=\"5.还是三角形\"></a>5.还是三角形</h3><p><strong>【问题描述】</strong></p>\n<p>给定三条边，请判断三角形的类型。</p>\n<p><strong>【输入形式】</strong></p>\n<p>输入数据包含3个整数，表示三条边的长度，数据保证三条边一定能够组成三角形。</p>\n<p><strong>【输出形式】</strong></p>\n<p>请判断三条边组成的三角形类型（锐角三角形、钝角三角形、直角三角形、等腰三角形、等边三角形）。如果数据符合多种类型，则只输出优先度最高的类型（上面的五种三角形，优先级从低到高），具体输出格式参见样例。</p>\n<p><strong>【样例输入】</strong></p>\n<p>3 3 3</p>\n<p><strong>【样例输出】</strong></p>\n<p> 等边三角形</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;math.h&gt; \nint Max(int a,int b,int c)\n{    \n    int t,max;    \n    t=a&gt;b?a:b;   \n    max=t&gt;c?t:c;   \n    return max;\n}\n\nint Min(int a,int b,int c)\n{    \n    int t,min; \n    t=a&lt;b?a:b; \n    min=t&lt;c?t:c; \n    return min;\n}\n\nint Mid(int a,int b,int c)\n{   \n    int mid;    \n    mid=a&gt;b?(a&lt;c?a:(b&gt;c?b:c)):(b&lt;c?b:(a&gt;c?a:c)); \n    return mid;\n}\n\nint main()\n{    \n    int i,n;\n    int a,b,c,k,x,y,z;             \n    scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);       \n    if((a+b&gt;c)&amp;&amp;(abs(a-b)&lt;c))           \n    {//  满足上面条件的三边可以构成三角形             \n        if(a==b&amp;&amp;b==c)                \n             printf(&quot;等边三角形\\n&quot;);              \n        else if((a==b&amp;&amp;c!=a)||(b==c&amp;a!=b)||(a==c&amp;&amp;b!=a))           \n                 printf(&quot;等腰三角形\\n&quot;);     \n             else                 \n            {                    \n                x=Min(a,b,c);         \n                y=Mid(a,b,c);      \n                z=Max(a,b,c);     \n                if(x*x+y*y&gt;z*z)                           \n                      printf(&quot;锐角三角形\\n&quot;);                        \n                else if (a*a+b*b==c*c)                            \n                      printf(&quot;直角三角形\\n&quot;);                        \n                else if(x*x+y*y&lt;z*z)                            \n                      printf(&quot;钝角三角形\\n&quot;);                   \n            }           \n    }       \n    else//不满足构成三角形的条件           \n    {                \n        printf(&quot;这三边不能构成三角形\\n&quot;);  \n    }    \n}\n</code></pre>\n<hr>\n<h3 id=\"6-寻找完全数\"><a href=\"#6-寻找完全数\" class=\"headerlink\" title=\"6.寻找完全数\"></a>6.寻找完全数</h3><p><strong>【问题描述】</strong></p>\n<p>完全数是特殊的自然数。它所有的真约数（即除了自身以外的约数）的和，恰好等于它本身。 第一个完全数是6，它有约数1、2、3、6，除去它本身6外，其余3个数相加，1+2+3=6 第二个完全数是28，它有约数1、2、4、7、14、28，除去它本身28外，其余5个数相加，1+2+4+7+14=28。 输入一个整数m，输出区间[1,m]内最大的完全数。</p>\n<p><strong>【输入形式】</strong></p>\n<p>输入一个整数。</p>\n<p><strong>【输出形式】</strong></p>\n<p>输出不超过m的最大完全数。</p>\n<p><strong>【样例输入】</strong></p>\n<p>32</p>\n<p><strong>【样例输出】</strong></p>\n<p>28</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main()\n{\n    long long int m;\n    long long int n=0,s=1;\n    long long int i=1,j=2;\n    long long int c;\n    scanf(&quot;%ld&quot;,&amp;m);\n\n    for(i=m;i&gt;=1;i--)\n    {\n        for(j=2;j&lt;=i;j++)\n        { \n            s = i/j;\n            if(i%j==0)\n            n = n+s;\n        }\n        if(n==i)\n        {\n            c = i;\n            break;\n        }\n        n = 0;\n\n    }\n    printf(&quot;%ld\\n&quot;,c);\n    return 0;\n}</code></pre>\n<hr>\n<h3 id=\"7-回文字符串\"><a href=\"#7-回文字符串\" class=\"headerlink\" title=\"7.回文字符串\"></a>7.回文字符串</h3><p><strong>【问题描述】</strong></p>\n<p>回文字符串是具有回文特性的字符串：即该字符串从左向右读和从右向左读都一样，单独的字母不作为回文字符串，例如abcddcba即为一个长度为8的回文字符串。 编写一个程序，输入一个全是字母的字符串，找出字符串中最长的回文字符串，输出最长回文字符串的长度和最长的回文字符串（长度相同的输出第一个），若无回文字符串，只输出0。</p>\n<p><strong>【输入形式】</strong></p>\n<p>输入第一行为只含字母的字符串，长度不超过10000字符。 </p>\n<p><strong>【输出形式】</strong></p>\n<p> 输出结果第一行为最长回文字符串的长度输出结果第二行为最长的回文字符串</p>\n<p><strong>【样例输入1】</strong></p>\n<p><code>abcdef</code></p>\n<p><strong>【样例输出1】</strong></p>\n<p><code>0</code></p>\n<p><strong>【样例输入2】</strong></p>\n<p><code>abcba</code></p>\n<p><strong>【样例输出2】</strong></p>\n<p><code>5 abcba</code></p>\n<p><strong>【样例输入3】</strong></p>\n<p>`aAabccbaABcdcBA</p>\n<p><strong>【样例输出3】</strong></p>\n<p><code>8 AabccbaA</code></p>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n#define LEN 100\n/*\n&quot;最大回文子串是指个字行串中长度最大的回文字符串,其基本算法思想如下：\n1、每个回文都有一个&quot;中心&quot;，当回文字符数为奇数时，中间的那个字符就是\n回文中心，但是当回文的字数为偶数时,回文的中心是最中间的那两个字符,\n且这两个字符相同。\n2.对任一个字符或者相同的两个连续字符,我们都可以假设它为回文的&quot;中心&quot;，\n向它的左右两边扩展出尽可能长的回文,对于每种假设,我们都能得到一个回文,\n而最长回文必定由其中的某个假设中得到!*/\n\n\nint Maxhw(char s[]) {\n    int i,j,k,maxlen;\n    int start=0;\n    int slen=strlen(s);\n    if(slen&lt;1) return 0;\n    maxlen=0;\n    for(i=0;i&lt;slen;i++) \n    {\n        for(j=0;(i-j&gt;=0)&amp;&amp;(i+j&lt;slen);j++)// 如果以i为中心是奇数的回文子串\n        {\n            if(s[i-j]!=s[i+j]) break;\n            if(j*2+1&gt;maxlen) \n            {\n                start=i-j;\n                maxlen=j*2+1;\n            }\n        }\n        for(j=0;(i-j&gt;=0)&amp;&amp;(i+j+1&lt;slen);j++) // 如果以i为中心是偶数的回文子串\n        {\n            if(s[i-j]!=s[i+j+1]) break;\n            if(j*2+2&gt;maxlen) \n            {\n                start=i-j;\n                maxlen=j*2+2;\n            }\n        }\n    }\n    for (k=start;k&lt;start+maxlen;k++) //输出最长回文串 \n        printf(&quot;%c&quot;,s[k]);\n    printf(&quot;\\n&quot;);\n    return maxlen; //返回最长回文串的长度 \n}\n\nint main()\n{\n    char ch[]=&quot;aAabccbaABcdcBA&quot;;\n    //char ch[LEN];\n    //gets(ch); \n    printf(&quot;%d\\n&quot;,Maxhw(ch));\n}</code></pre>\n<h3 id=\"8-三种方法求Fabonacci数列\"><a href=\"#8-三种方法求Fabonacci数列\" class=\"headerlink\" title=\"8.三种方法求Fabonacci数列\"></a>8.三种方法求Fabonacci数列</h3><p><strong>本题要求实现求Fabonacci数列项的函数。</strong></p>\n<p>Fabonacci数列的定义如下：<em>f</em>(<em>n</em>)=<em>f</em>(<em>n</em>−2)+<em>f</em>(<em>n</em>−1) (<em>n</em>≥2)，其中<em>f</em>(0)=0，<em>f</em>(1)=1。</p>\n<p><strong>函数接口定义</strong>：<code>int f( int n );</code></p>\n<p>函数<code>f</code>应返回第<code>n</code>个Fabonacci数。题目保证输入输出在长整型范围内。建议用递归实现。 </p>\n<pre><code class=\"c\">//递归\n\n#include &lt;stdio.h&gt;\n\nint fib(int n)\n{\n    if(n==1||n==2) \n        return 1;\n    else\n        return fib(n-1)+fib(n-2);\n } \n\nint main()\n{\n    int n;\n    scanf(&quot;%d&quot;,&amp;n);\n    printf(&quot;%d&quot;,fib(n));\n}\n</code></pre>\n<pre><code class=\"c\">//递推\n\n#include &lt;stdio.h&gt;\n\nint main()\n{\n    int i,n,a=1,b=1;\n    scanf(&quot;%d&quot;,&amp;n);\n    for (i=3;i&lt;=(n+1)/2+1;i++) //递推求相应项的值 \n    {    \n            a=a+b;\n            b=b+a;\n    }\n    if(n%2==1)\n        printf(&quot;%d &quot;,a);\n    else\n           printf(&quot;%d&quot;,b);    \n}</code></pre>\n<pre><code class=\"c\">//数组方法\n\n#include &lt;stdio.h&gt;\nint main()\n{\n    int i,n,m;\n    scanf(&quot;%d&quot;,&amp;n);\n    int fib[n];\n    fib[0]=1;fib[1]=1;\n    for(i=2;i&lt;n;i++)\n    {\n        fib[i]=fib[i-1]+fib[i-2];\n\n    }\n    printf(&quot;%d&quot;,fib[n-1]);\n}</code></pre>\n<hr>\n<h3 id=\"9-相亲数\"><a href=\"#9-相亲数\" class=\"headerlink\" title=\"9.相亲数\"></a>9.相亲数</h3><p><strong>【问题描述】</strong></p>\n<p>2500年前数学大师毕达哥拉斯就发现，220和284两数之间存在着奇妙的联系： 220的因数之和（除了自身之外的因数）为：110+55+44+22+20+11+10+5+4+2+1=284，284的因数之和为：142+71+4+2+1=220。 毕达哥拉斯把这样的数对称为相亲数。输入两个正整数（大于1并且在int的表示范围之内），分别计算它们所有因数之和（除了自身之外的因数），并判断它们是否是一对相亲数。</p>\n<p><strong>【输入形式】</strong></p>\n<p>从标准输入输入两个正整数，以一个空格分隔这两个正整数。</p>\n<p><strong>【输出形式】</strong></p>\n<p>以输入的先后顺序分行输出：输入的正整数，后跟英文逗号&ldquo;,&rdquo;，再从除自身之外的最大的因数开始输出其因数相加的公式（最小的因数1之后没有加号），最后输出英文等号&ldquo;=&rdquo;和因数之和。注意：所有输出元素间无空格。 若它们是一对相亲数，则在新的一行上输出1；若不是则在新的一行上输出0。</p>\n<p><strong>【样例输入1】</strong></p>\n<p>220 284</p>\n<p><strong>【样例输出1】</strong></p>\n<p>220,110+55+44+22+20+11+10+5+4+2+1=284 284,142+71+4+2+1=220 1</p>\n<p><strong>【样例输入2】</strong></p>\n<p>2560 3282</p>\n<p><strong>【样例输出2】</strong></p>\n<p>2560,1280+640+512+320+256+160+128+80+64+40+32+20+16+10+8+5+4+2+1=3578 3282,1641+1094+547+6+3+2+1=3294 0</p>\n<p><strong>【样例说明】</strong></p>\n<p>样例1中输入的两个正整数为220和284，220的因数之和为284，284的因数之和为220，所以它们是一对相亲数，最后输出1； 例2中输入的两个正整数是2560和3282，2560的因数之和为3578，3282的因数之和为3294，所以它们不是一对相亲数，最后输出0。</p>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;\nint p(int x)\n{\n    int i,n=0;\n    printf(&quot;%d,&quot;,x);\n    for(i=x-1;i&gt;=1;i--)\n    {\n        if(x%i==0) \n        {\n            printf(&quot;%d&quot;,i);\n            n=n+i;\n            if(i==1)\n                printf(&quot;=&quot;);\n            else\n                 printf(&quot;+&quot;);    \n        }\n    }        \n       printf(&quot;%d\\n&quot;,n);\n       return n;\n\n}\nint main()\n{\n    int a,b,v;\n    scanf(&quot;%d %d&quot;,&amp;a,&amp;b);\n    v=p(a);\n    p(b);\n    if(v==b)\n        printf(&quot;1&quot;);\n    else\n        printf(&quot;0&quot;);\n\n}</code></pre>\n<hr>\n<h3 id=\"10-计算天数\"><a href=\"#10-计算天数\" class=\"headerlink\" title=\"10.计算天数\"></a>10.计算天数</h3><p><strong>【问题描述】</strong></p>\n<p>定义一个结构体变量用以记录一个日期（包括年，月，日）。输入一个日期，计算该日是本年的第几天。 </p>\n<p><strong>【输入形式】</strong></p>\n<p>输入日期（包括年 月 日），是三个整数，以空格分隔。 </p>\n<p><strong>【输出形式】</strong></p>\n<p>输出该日是本年的第多少天。</p>\n<p> <strong>【样例输入】</strong></p>\n<p> 2003 3 25 </p>\n<p><strong>【样例输出】</strong></p>\n<p> 84 </p>\n<p><strong>【样例说明】</strong></p>\n<p>输入一个日期，输出该日是本年的第几天。 </p>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;\nint Y(int year)\n{    \n    int g;\n    if(year%400==0)\n        g=1;\n    else\n    {\n        if(year%4==0&amp;&amp;year%100!=0)\n            g=1;\n        else\n            g=0;\n    }\n    if(g==1)\n    {\n       return 1;\n    }\n    else\n    {\n       return 2;\n    }\n}\n\nint main()\n{\n    int a,b,c,sum;\n    int i,k=0,n=0;\n    scanf(&quot;%d %d %d&quot;,&amp;a,&amp;b,&amp;c);\n    if(Y(a)==1&amp;&amp;b&gt;2)\n    {\n        for(i=b-1;i&gt;=1;i--)\n        {\n            if(i%2==0)\n                n++;\n            else\n                k++;\n        }\n        sum=31*k+30*n+c-1;\n        printf(&quot;%d&quot;,sum);\n    }\n    if(Y(a)==2&amp;&amp;b&gt;2)\n    {\n            for(i=b-1;i&gt;=1;i--)\n        {\n            if(i%2==0)\n                n++;\n            else\n                k++;\n        }\n        sum=31*k+30*n+c-2;\n        printf(&quot;%d&quot;,sum);\n    }\n    if(b&lt;=2)\n    {\n            for(i=b-1;i&gt;=1;i--)\n        {\n            if(i%2==0)\n                n++;\n            else\n                k++;\n        }\n        sum=31*k+30*n+c;\n        printf(&quot;%d&quot;,sum);\n    }\n}\n</code></pre>\n<hr>\n<h3 id=\"11-求最大公因子\"><a href=\"#11-求最大公因子\" class=\"headerlink\" title=\"11.求最大公因子\"></a>11.求最大公因子</h3><p><strong>【问题描述】</strong></p>\n<p>用递归方法编写求最大公因子程序。两个正整数x和y的最大公因子定义为：如果y&lt;=x且x mod y＝0时，gcd(x,y)=y;如果y&gt;x时，gcd(x,y)=gcd(y,x);其他情况，gcd(x,y)=gcd(y,x mod y) </p>\n<p><strong>【输入形式】</strong></p>\n<p>用户在第一行输入两个数字，数字之间用空格分割。</p>\n<p> <strong>【输出形式】</strong></p>\n<p>程序在下一行输出前面输入的两个数字的最大公因子。 </p>\n<p><strong>【样例输入】</strong></p>\n<p>36 24 </p>\n<p><strong>【样例输出】</strong></p>\n<p>12 </p>\n<p><strong>【样例说明】</strong></p>\n<p>用户输入36，24，程序输出它们的最大公因子12 </p>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;\nint f(int x,int y)\n{\n    if(x%y==0) \n        return y;\n     else \n         f(y,x%y);  \n}\nint main()\n{\n    int a,b;\n    scanf(&quot;%d %d&quot;,&amp;a,&amp;b);\n    printf(&quot;%d&quot;,f(a,b));\n}\n</code></pre>\n<h3 id=\"12-整数合并\"><a href=\"#12-整数合并\" class=\"headerlink\" title=\"12.整数合并\"></a>12.整数合并</h3><p><strong>【问题描述】</strong> </p>\n<p>编写一函数int comb(int a,int b)，将两个两位数的正整数a、b合并形成一个整数并返回。合并的方式是：将a的十位和个位数依次放在结果的十位和千位上， b的十位和个位数依次放在结果的个位和百位上。例如，当a＝45，b=12。调用该函数后，返回5241。要求在main函数中调用该函数进行验证：从键盘输入两个整数，然后调用该函数进行合并，并输出合并后的结果。 </p>\n<p><strong>【输入形式】</strong></p>\n<p> 输入两个两位数的正整数，以空格隔开。</p>\n<p><strong>【输出形式】</strong></p>\n<p>输出合并后的正整数。 </p>\n<p><strong>【输入样例】</strong> </p>\n<p>45 12 </p>\n<p><strong>【输出样例】</strong></p>\n<p> 5241</p>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;\nint main()\n{\n    int a,b;\n    int sum,c,d,e,f;\n    scanf(&quot;%d %d&quot;,&amp;a,&amp;b);\n    c=(a%10)*1000;\n    a=a/10;\n    d=(a%10)*10;\n\n    e=(b%10)*100;\n    b=b/10;\n    f=(b%10);\n    sum=c+d+e+f;\n    printf(&quot;%d&quot;,sum);\n}\n</code></pre>\n<p>暂时就更新到这里吧</p>\n","path":"c-yu-yan-bian-cheng-ti-mu-zheng-he.html","permalink":"https://www.yshawlon.cn/c-yu-yan-bian-cheng-ti-mu-zheng-he.html","tags":[{"name":"学习笔记","_id":"clq6dy48u0013ikw0galx0575","slug":"学习笔记","path":"tags/学习笔记/","permalink":"https://www.yshawlon.cn/tags/学习笔记/","length":9},{"name":"代码整合","_id":"clq6dy4a3002cikw0qe5byfd2","slug":"代码整合","path":"tags/代码整合/","permalink":"https://www.yshawlon.cn/tags/代码整合/","length":1}],"categories":[{"name":"C语言","_id":"clq6dy49g001nikw097z74kfd","slug":"C语言","path":"categories/C语言/","permalink":"https://www.yshawlon.cn/categories/C语言/","length":1}],"prev":{"title":"C++学习笔记整理-数据的共享与保护","date":"2020-04-23T04:59:54.000Z","summary":"第五章数据的共享与保护,作用域是一个标识符在程序正文中有效的区域。","slug":"C-学习笔记整理-第五章《数据的共享与保护》","published":true,"updated":"2021-05-18T07:58:26.907Z","_id":"clq6dy486000aikw06ntsrm97","layout":"post","photos":[],"link":"","excerpt":"","path":"c-xue-xi-bi-ji-zheng-li-di-wu-zhang-shu-ju-de-gong-xiang-yu-bao-hu.html","permalink":"https://www.yshawlon.cn/c-xue-xi-bi-ji-zheng-li-di-wu-zhang-shu-ju-de-gong-xiang-yu-bao-hu.html","__post":true},"next":{"title":"Hexo博客部署到腾讯云服务器(使用宝塔面板)","date":"2020-04-10T09:13:54.000Z","summary":"宝塔Linux是提升运维效率的服务器管理软件，一键LAMP/LNMP/集群/监控/网站/FTP/数据","slug":"使用宝塔面板一键部署hexo博客","published":true,"updated":"2021-05-18T08:42:06.167Z","_id":"clq6dy4ac002rikw0f9k9onoy","layout":"post","photos":[],"link":"","excerpt":"","path":"shi-yong-bao-ta-mian-ban-yi-jian-bu-shu-hexo-bo-ke.html","permalink":"https://www.yshawlon.cn/shi-yong-bao-ta-mian-ban-yi-jian-bu-shu-hexo-bo-ke.html","__post":true},"__post":true}